
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002c8c  08002c8c  00012c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cac  08002cac  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08002cac  08002cac  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cac  08002cac  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cac  08002cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000034  08002ce8  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002ce8  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b70  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b08  00000000  00000000  00028bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002a6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d3c  00000000  00000000  0002baf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b937  00000000  00000000  00042834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822a9  00000000  00000000  0004e16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002994  00000000  00000000  000d0464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c74 	.word	0x08002c74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002c74 	.word	0x08002c74

0800014c <isButtonPressed>:
	HAL_GPIO_WritePin(Button1_GPIO_Port, Button1_Pin, NORMAL_STATE);
	HAL_GPIO_WritePin(Button2_GPIO_Port, Button2_Pin, NORMAL_STATE);
	HAL_GPIO_WritePin(Button3_GPIO_Port, Button3_Pin, NORMAL_STATE);
}

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000080 	.word	0x20000080

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000080 	.word	0x20000080

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e084      	b.n	80002b6 <getKeyInput+0x116>
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 80001ac:	4a46      	ldr	r2, [pc, #280]	; (80002c8 <getKeyInput+0x128>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4945      	ldr	r1, [pc, #276]	; (80002cc <getKeyInput+0x12c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounceButtonBuffer2[i] = buttonBuffer[i];
 80001bc:	4a44      	ldr	r2, [pc, #272]	; (80002d0 <getKeyInput+0x130>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4940      	ldr	r1, [pc, #256]	; (80002c8 <getKeyInput+0x128>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (i == 0) {
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10a      	bne.n	80001e8 <getKeyInput+0x48>
			buttonBuffer[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001d2:	2102      	movs	r1, #2
 80001d4:	483f      	ldr	r0, [pc, #252]	; (80002d4 <getKeyInput+0x134>)
 80001d6:	f001 fd0d 	bl	8001bf4 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a3c      	ldr	r2, [pc, #240]	; (80002d0 <getKeyInput+0x130>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e01a      	b.n	800021e <getKeyInput+0x7e>
		} else if (i == 1) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x64>
			buttonBuffer[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80001ee:	2104      	movs	r1, #4
 80001f0:	4838      	ldr	r0, [pc, #224]	; (80002d4 <getKeyInput+0x134>)
 80001f2:	f001 fcff 	bl	8001bf4 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a35      	ldr	r2, [pc, #212]	; (80002d0 <getKeyInput+0x130>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000202:	e00c      	b.n	800021e <getKeyInput+0x7e>
		} else if (i == 2) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b02      	cmp	r3, #2
 8000208:	d109      	bne.n	800021e <getKeyInput+0x7e>
			buttonBuffer[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 800020a:	2108      	movs	r1, #8
 800020c:	4831      	ldr	r0, [pc, #196]	; (80002d4 <getKeyInput+0x134>)
 800020e:	f001 fcf1 	bl	8001bf4 <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	4619      	mov	r1, r3
 8000216:	4a2e      	ldr	r2, [pc, #184]	; (80002d0 <getKeyInput+0x130>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 800021e:	4a2b      	ldr	r2, [pc, #172]	; (80002cc <getKeyInput+0x12c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000226:	4928      	ldr	r1, [pc, #160]	; (80002c8 <getKeyInput+0x128>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d13e      	bne.n	80002b0 <getKeyInput+0x110>
				&& (debounceButtonBuffer2[i] == buttonBuffer[i])) {
 8000232:	4a25      	ldr	r2, [pc, #148]	; (80002c8 <getKeyInput+0x128>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023a:	4925      	ldr	r1, [pc, #148]	; (80002d0 <getKeyInput+0x130>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000242:	429a      	cmp	r2, r3
 8000244:	d134      	bne.n	80002b0 <getKeyInput+0x110>
			if (longPressButtonBuffer[i] != buttonBuffer[i]) {
 8000246:	4a24      	ldr	r2, [pc, #144]	; (80002d8 <getKeyInput+0x138>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024e:	4920      	ldr	r1, [pc, #128]	; (80002d0 <getKeyInput+0x130>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000256:	429a      	cmp	r2, r3
 8000258:	d016      	beq.n	8000288 <getKeyInput+0xe8>
				longPressButtonBuffer[i] = buttonBuffer[i];
 800025a:	4a1d      	ldr	r2, [pc, #116]	; (80002d0 <getKeyInput+0x130>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	491d      	ldr	r1, [pc, #116]	; (80002d8 <getKeyInput+0x138>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (buttonBuffer[i] == PRESSED_STATE) {
 800026a:	4a19      	ldr	r2, [pc, #100]	; (80002d0 <getKeyInput+0x130>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d11c      	bne.n	80002b0 <getKeyInput+0x110>
					TimeOutForKeyPress[i] = 200;
 8000276:	4a19      	ldr	r2, [pc, #100]	; (80002dc <getKeyInput+0x13c>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	21c8      	movs	r1, #200	; 0xc8
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f7ff ff7d 	bl	8000180 <subKeyProcess>
 8000286:	e013      	b.n	80002b0 <getKeyInput+0x110>
				}
			} else {
				TimeOutForKeyPress[i]--;
 8000288:	4a14      	ldr	r2, [pc, #80]	; (80002dc <getKeyInput+0x13c>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	1e5a      	subs	r2, r3, #1
 8000292:	4912      	ldr	r1, [pc, #72]	; (80002dc <getKeyInput+0x13c>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 800029a:	4a10      	ldr	r2, [pc, #64]	; (80002dc <getKeyInput+0x13c>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d104      	bne.n	80002b0 <getKeyInput+0x110>
					longPressButtonBuffer[i] = NORMAL_STATE;
 80002a6:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <getKeyInput+0x138>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2101      	movs	r1, #1
 80002ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3301      	adds	r3, #1
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b02      	cmp	r3, #2
 80002ba:	f77f af77 	ble.w	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000068 	.word	0x20000068
 80002cc:	2000005c 	.word	0x2000005c
 80002d0:	20000050 	.word	0x20000050
 80002d4:	40010800 	.word	0x40010800
 80002d8:	20000074 	.word	0x20000074
 80002dc:	2000008c 	.word	0x2000008c

080002e0 <display7SEG1>:
 *  Created on: Nov 1, 2022
 *      Author: Linh
 */
#include "led_display.h"

void display7SEG1(int num) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	switch (num) {
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2b09      	cmp	r3, #9
 80002ec:	f200 8180 	bhi.w	80005f0 <display7SEG1+0x310>
 80002f0:	a201      	add	r2, pc, #4	; (adr r2, 80002f8 <display7SEG1+0x18>)
 80002f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f6:	bf00      	nop
 80002f8:	08000321 	.word	0x08000321
 80002fc:	08000369 	.word	0x08000369
 8000300:	080003b1 	.word	0x080003b1
 8000304:	080003f9 	.word	0x080003f9
 8000308:	08000441 	.word	0x08000441
 800030c:	08000489 	.word	0x08000489
 8000310:	080004d1 	.word	0x080004d1
 8000314:	08000519 	.word	0x08000519
 8000318:	08000561 	.word	0x08000561
 800031c:	080005a9 	.word	0x080005a9
	case 0:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2101      	movs	r1, #1
 8000324:	48c6      	ldr	r0, [pc, #792]	; (8000640 <display7SEG1+0x360>)
 8000326:	f001 fc7c 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2102      	movs	r1, #2
 800032e:	48c4      	ldr	r0, [pc, #784]	; (8000640 <display7SEG1+0x360>)
 8000330:	f001 fc77 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2104      	movs	r1, #4
 8000338:	48c1      	ldr	r0, [pc, #772]	; (8000640 <display7SEG1+0x360>)
 800033a:	f001 fc72 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2108      	movs	r1, #8
 8000342:	48bf      	ldr	r0, [pc, #764]	; (8000640 <display7SEG1+0x360>)
 8000344:	f001 fc6d 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2110      	movs	r1, #16
 800034c:	48bc      	ldr	r0, [pc, #752]	; (8000640 <display7SEG1+0x360>)
 800034e:	f001 fc68 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	2120      	movs	r1, #32
 8000356:	48ba      	ldr	r0, [pc, #744]	; (8000640 <display7SEG1+0x360>)
 8000358:	f001 fc63 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800035c:	2201      	movs	r2, #1
 800035e:	2140      	movs	r1, #64	; 0x40
 8000360:	48b7      	ldr	r0, [pc, #732]	; (8000640 <display7SEG1+0x360>)
 8000362:	f001 fc5e 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 8000366:	e167      	b.n	8000638 <display7SEG1+0x358>
	case 1:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000368:	2201      	movs	r2, #1
 800036a:	2101      	movs	r1, #1
 800036c:	48b4      	ldr	r0, [pc, #720]	; (8000640 <display7SEG1+0x360>)
 800036e:	f001 fc58 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	2102      	movs	r1, #2
 8000376:	48b2      	ldr	r0, [pc, #712]	; (8000640 <display7SEG1+0x360>)
 8000378:	f001 fc53 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	2104      	movs	r1, #4
 8000380:	48af      	ldr	r0, [pc, #700]	; (8000640 <display7SEG1+0x360>)
 8000382:	f001 fc4e 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000386:	2201      	movs	r2, #1
 8000388:	2108      	movs	r1, #8
 800038a:	48ad      	ldr	r0, [pc, #692]	; (8000640 <display7SEG1+0x360>)
 800038c:	f001 fc49 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000390:	2201      	movs	r2, #1
 8000392:	2110      	movs	r1, #16
 8000394:	48aa      	ldr	r0, [pc, #680]	; (8000640 <display7SEG1+0x360>)
 8000396:	f001 fc44 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800039a:	2201      	movs	r2, #1
 800039c:	2120      	movs	r1, #32
 800039e:	48a8      	ldr	r0, [pc, #672]	; (8000640 <display7SEG1+0x360>)
 80003a0:	f001 fc3f 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2140      	movs	r1, #64	; 0x40
 80003a8:	48a5      	ldr	r0, [pc, #660]	; (8000640 <display7SEG1+0x360>)
 80003aa:	f001 fc3a 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 80003ae:	e143      	b.n	8000638 <display7SEG1+0x358>
	case 2:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2101      	movs	r1, #1
 80003b4:	48a2      	ldr	r0, [pc, #648]	; (8000640 <display7SEG1+0x360>)
 80003b6:	f001 fc34 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2102      	movs	r1, #2
 80003be:	48a0      	ldr	r0, [pc, #640]	; (8000640 <display7SEG1+0x360>)
 80003c0:	f001 fc2f 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2104      	movs	r1, #4
 80003c8:	489d      	ldr	r0, [pc, #628]	; (8000640 <display7SEG1+0x360>)
 80003ca:	f001 fc2a 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2108      	movs	r1, #8
 80003d2:	489b      	ldr	r0, [pc, #620]	; (8000640 <display7SEG1+0x360>)
 80003d4:	f001 fc25 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2110      	movs	r1, #16
 80003dc:	4898      	ldr	r0, [pc, #608]	; (8000640 <display7SEG1+0x360>)
 80003de:	f001 fc20 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	2120      	movs	r1, #32
 80003e6:	4896      	ldr	r0, [pc, #600]	; (8000640 <display7SEG1+0x360>)
 80003e8:	f001 fc1b 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2140      	movs	r1, #64	; 0x40
 80003f0:	4893      	ldr	r0, [pc, #588]	; (8000640 <display7SEG1+0x360>)
 80003f2:	f001 fc16 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 80003f6:	e11f      	b.n	8000638 <display7SEG1+0x358>
	case 3:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2101      	movs	r1, #1
 80003fc:	4890      	ldr	r0, [pc, #576]	; (8000640 <display7SEG1+0x360>)
 80003fe:	f001 fc10 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2102      	movs	r1, #2
 8000406:	488e      	ldr	r0, [pc, #568]	; (8000640 <display7SEG1+0x360>)
 8000408:	f001 fc0b 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	2104      	movs	r1, #4
 8000410:	488b      	ldr	r0, [pc, #556]	; (8000640 <display7SEG1+0x360>)
 8000412:	f001 fc06 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2108      	movs	r1, #8
 800041a:	4889      	ldr	r0, [pc, #548]	; (8000640 <display7SEG1+0x360>)
 800041c:	f001 fc01 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000420:	2201      	movs	r2, #1
 8000422:	2110      	movs	r1, #16
 8000424:	4886      	ldr	r0, [pc, #536]	; (8000640 <display7SEG1+0x360>)
 8000426:	f001 fbfc 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800042a:	2201      	movs	r2, #1
 800042c:	2120      	movs	r1, #32
 800042e:	4884      	ldr	r0, [pc, #528]	; (8000640 <display7SEG1+0x360>)
 8000430:	f001 fbf7 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2140      	movs	r1, #64	; 0x40
 8000438:	4881      	ldr	r0, [pc, #516]	; (8000640 <display7SEG1+0x360>)
 800043a:	f001 fbf2 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 800043e:	e0fb      	b.n	8000638 <display7SEG1+0x358>
	case 4:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000440:	2201      	movs	r2, #1
 8000442:	2101      	movs	r1, #1
 8000444:	487e      	ldr	r0, [pc, #504]	; (8000640 <display7SEG1+0x360>)
 8000446:	f001 fbec 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2102      	movs	r1, #2
 800044e:	487c      	ldr	r0, [pc, #496]	; (8000640 <display7SEG1+0x360>)
 8000450:	f001 fbe7 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2104      	movs	r1, #4
 8000458:	4879      	ldr	r0, [pc, #484]	; (8000640 <display7SEG1+0x360>)
 800045a:	f001 fbe2 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800045e:	2201      	movs	r2, #1
 8000460:	2108      	movs	r1, #8
 8000462:	4877      	ldr	r0, [pc, #476]	; (8000640 <display7SEG1+0x360>)
 8000464:	f001 fbdd 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000468:	2201      	movs	r2, #1
 800046a:	2110      	movs	r1, #16
 800046c:	4874      	ldr	r0, [pc, #464]	; (8000640 <display7SEG1+0x360>)
 800046e:	f001 fbd8 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2120      	movs	r1, #32
 8000476:	4872      	ldr	r0, [pc, #456]	; (8000640 <display7SEG1+0x360>)
 8000478:	f001 fbd3 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2140      	movs	r1, #64	; 0x40
 8000480:	486f      	ldr	r0, [pc, #444]	; (8000640 <display7SEG1+0x360>)
 8000482:	f001 fbce 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 8000486:	e0d7      	b.n	8000638 <display7SEG1+0x358>
	case 5:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2101      	movs	r1, #1
 800048c:	486c      	ldr	r0, [pc, #432]	; (8000640 <display7SEG1+0x360>)
 800048e:	f001 fbc8 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2102      	movs	r1, #2
 8000496:	486a      	ldr	r0, [pc, #424]	; (8000640 <display7SEG1+0x360>)
 8000498:	f001 fbc3 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2104      	movs	r1, #4
 80004a0:	4867      	ldr	r0, [pc, #412]	; (8000640 <display7SEG1+0x360>)
 80004a2:	f001 fbbe 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2108      	movs	r1, #8
 80004aa:	4865      	ldr	r0, [pc, #404]	; (8000640 <display7SEG1+0x360>)
 80004ac:	f001 fbb9 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2110      	movs	r1, #16
 80004b4:	4862      	ldr	r0, [pc, #392]	; (8000640 <display7SEG1+0x360>)
 80004b6:	f001 fbb4 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2120      	movs	r1, #32
 80004be:	4860      	ldr	r0, [pc, #384]	; (8000640 <display7SEG1+0x360>)
 80004c0:	f001 fbaf 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2140      	movs	r1, #64	; 0x40
 80004c8:	485d      	ldr	r0, [pc, #372]	; (8000640 <display7SEG1+0x360>)
 80004ca:	f001 fbaa 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 80004ce:	e0b3      	b.n	8000638 <display7SEG1+0x358>
	case 6:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2101      	movs	r1, #1
 80004d4:	485a      	ldr	r0, [pc, #360]	; (8000640 <display7SEG1+0x360>)
 80004d6:	f001 fba4 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80004da:	2201      	movs	r2, #1
 80004dc:	2102      	movs	r1, #2
 80004de:	4858      	ldr	r0, [pc, #352]	; (8000640 <display7SEG1+0x360>)
 80004e0:	f001 fb9f 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2104      	movs	r1, #4
 80004e8:	4855      	ldr	r0, [pc, #340]	; (8000640 <display7SEG1+0x360>)
 80004ea:	f001 fb9a 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	4853      	ldr	r0, [pc, #332]	; (8000640 <display7SEG1+0x360>)
 80004f4:	f001 fb95 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2110      	movs	r1, #16
 80004fc:	4850      	ldr	r0, [pc, #320]	; (8000640 <display7SEG1+0x360>)
 80004fe:	f001 fb90 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2120      	movs	r1, #32
 8000506:	484e      	ldr	r0, [pc, #312]	; (8000640 <display7SEG1+0x360>)
 8000508:	f001 fb8b 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2140      	movs	r1, #64	; 0x40
 8000510:	484b      	ldr	r0, [pc, #300]	; (8000640 <display7SEG1+0x360>)
 8000512:	f001 fb86 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 8000516:	e08f      	b.n	8000638 <display7SEG1+0x358>
	case 7:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2101      	movs	r1, #1
 800051c:	4848      	ldr	r0, [pc, #288]	; (8000640 <display7SEG1+0x360>)
 800051e:	f001 fb80 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2102      	movs	r1, #2
 8000526:	4846      	ldr	r0, [pc, #280]	; (8000640 <display7SEG1+0x360>)
 8000528:	f001 fb7b 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2104      	movs	r1, #4
 8000530:	4843      	ldr	r0, [pc, #268]	; (8000640 <display7SEG1+0x360>)
 8000532:	f001 fb76 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2108      	movs	r1, #8
 800053a:	4841      	ldr	r0, [pc, #260]	; (8000640 <display7SEG1+0x360>)
 800053c:	f001 fb71 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2110      	movs	r1, #16
 8000544:	483e      	ldr	r0, [pc, #248]	; (8000640 <display7SEG1+0x360>)
 8000546:	f001 fb6c 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2120      	movs	r1, #32
 800054e:	483c      	ldr	r0, [pc, #240]	; (8000640 <display7SEG1+0x360>)
 8000550:	f001 fb67 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2140      	movs	r1, #64	; 0x40
 8000558:	4839      	ldr	r0, [pc, #228]	; (8000640 <display7SEG1+0x360>)
 800055a:	f001 fb62 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 800055e:	e06b      	b.n	8000638 <display7SEG1+0x358>
	case 8:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2101      	movs	r1, #1
 8000564:	4836      	ldr	r0, [pc, #216]	; (8000640 <display7SEG1+0x360>)
 8000566:	f001 fb5c 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2102      	movs	r1, #2
 800056e:	4834      	ldr	r0, [pc, #208]	; (8000640 <display7SEG1+0x360>)
 8000570:	f001 fb57 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2104      	movs	r1, #4
 8000578:	4831      	ldr	r0, [pc, #196]	; (8000640 <display7SEG1+0x360>)
 800057a:	f001 fb52 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	482f      	ldr	r0, [pc, #188]	; (8000640 <display7SEG1+0x360>)
 8000584:	f001 fb4d 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	482c      	ldr	r0, [pc, #176]	; (8000640 <display7SEG1+0x360>)
 800058e:	f001 fb48 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2120      	movs	r1, #32
 8000596:	482a      	ldr	r0, [pc, #168]	; (8000640 <display7SEG1+0x360>)
 8000598:	f001 fb43 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2140      	movs	r1, #64	; 0x40
 80005a0:	4827      	ldr	r0, [pc, #156]	; (8000640 <display7SEG1+0x360>)
 80005a2:	f001 fb3e 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 80005a6:	e047      	b.n	8000638 <display7SEG1+0x358>
	case 9:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2101      	movs	r1, #1
 80005ac:	4824      	ldr	r0, [pc, #144]	; (8000640 <display7SEG1+0x360>)
 80005ae:	f001 fb38 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2102      	movs	r1, #2
 80005b6:	4822      	ldr	r0, [pc, #136]	; (8000640 <display7SEG1+0x360>)
 80005b8:	f001 fb33 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2104      	movs	r1, #4
 80005c0:	481f      	ldr	r0, [pc, #124]	; (8000640 <display7SEG1+0x360>)
 80005c2:	f001 fb2e 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2108      	movs	r1, #8
 80005ca:	481d      	ldr	r0, [pc, #116]	; (8000640 <display7SEG1+0x360>)
 80005cc:	f001 fb29 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	481a      	ldr	r0, [pc, #104]	; (8000640 <display7SEG1+0x360>)
 80005d6:	f001 fb24 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2120      	movs	r1, #32
 80005de:	4818      	ldr	r0, [pc, #96]	; (8000640 <display7SEG1+0x360>)
 80005e0:	f001 fb1f 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2140      	movs	r1, #64	; 0x40
 80005e8:	4815      	ldr	r0, [pc, #84]	; (8000640 <display7SEG1+0x360>)
 80005ea:	f001 fb1a 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 80005ee:	e023      	b.n	8000638 <display7SEG1+0x358>
	default:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2101      	movs	r1, #1
 80005f4:	4812      	ldr	r0, [pc, #72]	; (8000640 <display7SEG1+0x360>)
 80005f6:	f001 fb14 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2102      	movs	r1, #2
 80005fe:	4810      	ldr	r0, [pc, #64]	; (8000640 <display7SEG1+0x360>)
 8000600:	f001 fb0f 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2104      	movs	r1, #4
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <display7SEG1+0x360>)
 800060a:	f001 fb0a 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2108      	movs	r1, #8
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <display7SEG1+0x360>)
 8000614:	f001 fb05 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2110      	movs	r1, #16
 800061c:	4808      	ldr	r0, [pc, #32]	; (8000640 <display7SEG1+0x360>)
 800061e:	f001 fb00 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2120      	movs	r1, #32
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <display7SEG1+0x360>)
 8000628:	f001 fafb 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <display7SEG1+0x360>)
 8000632:	f001 faf6 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 8000636:	bf00      	nop

	}
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40010c00 	.word	0x40010c00

08000644 <display7SEG2>:

void display7SEG2(int num) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	switch (num) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b09      	cmp	r3, #9
 8000650:	f200 81be 	bhi.w	80009d0 <display7SEG2+0x38c>
 8000654:	a201      	add	r2, pc, #4	; (adr r2, 800065c <display7SEG2+0x18>)
 8000656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065a:	bf00      	nop
 800065c:	08000685 	.word	0x08000685
 8000660:	080006d9 	.word	0x080006d9
 8000664:	0800072d 	.word	0x0800072d
 8000668:	08000781 	.word	0x08000781
 800066c:	080007d5 	.word	0x080007d5
 8000670:	08000829 	.word	0x08000829
 8000674:	0800087d 	.word	0x0800087d
 8000678:	080008d1 	.word	0x080008d1
 800067c:	08000925 	.word	0x08000925
 8000680:	08000979 	.word	0x08000979
	case 0:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2180      	movs	r1, #128	; 0x80
 8000688:	48d0      	ldr	r0, [pc, #832]	; (80009cc <display7SEG2+0x388>)
 800068a:	f001 faca 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000694:	48cd      	ldr	r0, [pc, #820]	; (80009cc <display7SEG2+0x388>)
 8000696:	f001 fac4 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a0:	48ca      	ldr	r0, [pc, #808]	; (80009cc <display7SEG2+0x388>)
 80006a2:	f001 fabe 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ac:	48c7      	ldr	r0, [pc, #796]	; (80009cc <display7SEG2+0x388>)
 80006ae:	f001 fab8 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b8:	48c4      	ldr	r0, [pc, #784]	; (80009cc <display7SEG2+0x388>)
 80006ba:	f001 fab2 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c4:	48c1      	ldr	r0, [pc, #772]	; (80009cc <display7SEG2+0x388>)
 80006c6:	f001 faac 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d0:	48be      	ldr	r0, [pc, #760]	; (80009cc <display7SEG2+0x388>)
 80006d2:	f001 faa6 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 80006d6:	e1a5      	b.n	8000a24 <display7SEG2+0x3e0>
	case 1:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	48bb      	ldr	r0, [pc, #748]	; (80009cc <display7SEG2+0x388>)
 80006de:	f001 faa0 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e8:	48b8      	ldr	r0, [pc, #736]	; (80009cc <display7SEG2+0x388>)
 80006ea:	f001 fa9a 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f4:	48b5      	ldr	r0, [pc, #724]	; (80009cc <display7SEG2+0x388>)
 80006f6:	f001 fa94 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000700:	48b2      	ldr	r0, [pc, #712]	; (80009cc <display7SEG2+0x388>)
 8000702:	f001 fa8e 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070c:	48af      	ldr	r0, [pc, #700]	; (80009cc <display7SEG2+0x388>)
 800070e:	f001 fa88 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000718:	48ac      	ldr	r0, [pc, #688]	; (80009cc <display7SEG2+0x388>)
 800071a:	f001 fa82 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000724:	48a9      	ldr	r0, [pc, #676]	; (80009cc <display7SEG2+0x388>)
 8000726:	f001 fa7c 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 800072a:	e17b      	b.n	8000a24 <display7SEG2+0x3e0>
	case 2:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	48a6      	ldr	r0, [pc, #664]	; (80009cc <display7SEG2+0x388>)
 8000732:	f001 fa76 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073c:	48a3      	ldr	r0, [pc, #652]	; (80009cc <display7SEG2+0x388>)
 800073e:	f001 fa70 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000748:	48a0      	ldr	r0, [pc, #640]	; (80009cc <display7SEG2+0x388>)
 800074a:	f001 fa6a 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000754:	489d      	ldr	r0, [pc, #628]	; (80009cc <display7SEG2+0x388>)
 8000756:	f001 fa64 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000760:	489a      	ldr	r0, [pc, #616]	; (80009cc <display7SEG2+0x388>)
 8000762:	f001 fa5e 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076c:	4897      	ldr	r0, [pc, #604]	; (80009cc <display7SEG2+0x388>)
 800076e:	f001 fa58 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000778:	4894      	ldr	r0, [pc, #592]	; (80009cc <display7SEG2+0x388>)
 800077a:	f001 fa52 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 800077e:	e151      	b.n	8000a24 <display7SEG2+0x3e0>
	case 3:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	4891      	ldr	r0, [pc, #580]	; (80009cc <display7SEG2+0x388>)
 8000786:	f001 fa4c 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	488e      	ldr	r0, [pc, #568]	; (80009cc <display7SEG2+0x388>)
 8000792:	f001 fa46 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079c:	488b      	ldr	r0, [pc, #556]	; (80009cc <display7SEG2+0x388>)
 800079e:	f001 fa40 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a8:	4888      	ldr	r0, [pc, #544]	; (80009cc <display7SEG2+0x388>)
 80007aa:	f001 fa3a 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	4885      	ldr	r0, [pc, #532]	; (80009cc <display7SEG2+0x388>)
 80007b6:	f001 fa34 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c0:	4882      	ldr	r0, [pc, #520]	; (80009cc <display7SEG2+0x388>)
 80007c2:	f001 fa2e 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007cc:	487f      	ldr	r0, [pc, #508]	; (80009cc <display7SEG2+0x388>)
 80007ce:	f001 fa28 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 80007d2:	e127      	b.n	8000a24 <display7SEG2+0x3e0>
	case 4:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	487c      	ldr	r0, [pc, #496]	; (80009cc <display7SEG2+0x388>)
 80007da:	f001 fa22 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e4:	4879      	ldr	r0, [pc, #484]	; (80009cc <display7SEG2+0x388>)
 80007e6:	f001 fa1c 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f0:	4876      	ldr	r0, [pc, #472]	; (80009cc <display7SEG2+0x388>)
 80007f2:	f001 fa16 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fc:	4873      	ldr	r0, [pc, #460]	; (80009cc <display7SEG2+0x388>)
 80007fe:	f001 fa10 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000808:	4870      	ldr	r0, [pc, #448]	; (80009cc <display7SEG2+0x388>)
 800080a:	f001 fa0a 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000814:	486d      	ldr	r0, [pc, #436]	; (80009cc <display7SEG2+0x388>)
 8000816:	f001 fa04 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000820:	486a      	ldr	r0, [pc, #424]	; (80009cc <display7SEG2+0x388>)
 8000822:	f001 f9fe 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 8000826:	e0fd      	b.n	8000a24 <display7SEG2+0x3e0>
	case 5:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	4867      	ldr	r0, [pc, #412]	; (80009cc <display7SEG2+0x388>)
 800082e:	f001 f9f8 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000838:	4864      	ldr	r0, [pc, #400]	; (80009cc <display7SEG2+0x388>)
 800083a:	f001 f9f2 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000844:	4861      	ldr	r0, [pc, #388]	; (80009cc <display7SEG2+0x388>)
 8000846:	f001 f9ec 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000850:	485e      	ldr	r0, [pc, #376]	; (80009cc <display7SEG2+0x388>)
 8000852:	f001 f9e6 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085c:	485b      	ldr	r0, [pc, #364]	; (80009cc <display7SEG2+0x388>)
 800085e:	f001 f9e0 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000868:	4858      	ldr	r0, [pc, #352]	; (80009cc <display7SEG2+0x388>)
 800086a:	f001 f9da 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000874:	4855      	ldr	r0, [pc, #340]	; (80009cc <display7SEG2+0x388>)
 8000876:	f001 f9d4 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 800087a:	e0d3      	b.n	8000a24 <display7SEG2+0x3e0>
	case 6:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	4852      	ldr	r0, [pc, #328]	; (80009cc <display7SEG2+0x388>)
 8000882:	f001 f9ce 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, SET);
 8000886:	2201      	movs	r2, #1
 8000888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088c:	484f      	ldr	r0, [pc, #316]	; (80009cc <display7SEG2+0x388>)
 800088e:	f001 f9c8 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000898:	484c      	ldr	r0, [pc, #304]	; (80009cc <display7SEG2+0x388>)
 800089a:	f001 f9c2 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a4:	4849      	ldr	r0, [pc, #292]	; (80009cc <display7SEG2+0x388>)
 80008a6:	f001 f9bc 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008b0:	4846      	ldr	r0, [pc, #280]	; (80009cc <display7SEG2+0x388>)
 80008b2:	f001 f9b6 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008bc:	4843      	ldr	r0, [pc, #268]	; (80009cc <display7SEG2+0x388>)
 80008be:	f001 f9b0 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	4840      	ldr	r0, [pc, #256]	; (80009cc <display7SEG2+0x388>)
 80008ca:	f001 f9aa 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 80008ce:	e0a9      	b.n	8000a24 <display7SEG2+0x3e0>
	case 7:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	483d      	ldr	r0, [pc, #244]	; (80009cc <display7SEG2+0x388>)
 80008d6:	f001 f9a4 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e0:	483a      	ldr	r0, [pc, #232]	; (80009cc <display7SEG2+0x388>)
 80008e2:	f001 f99e 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	4837      	ldr	r0, [pc, #220]	; (80009cc <display7SEG2+0x388>)
 80008ee:	f001 f998 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f8:	4834      	ldr	r0, [pc, #208]	; (80009cc <display7SEG2+0x388>)
 80008fa:	f001 f992 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000904:	4831      	ldr	r0, [pc, #196]	; (80009cc <display7SEG2+0x388>)
 8000906:	f001 f98c 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, SET);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000910:	482e      	ldr	r0, [pc, #184]	; (80009cc <display7SEG2+0x388>)
 8000912:	f001 f986 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, SET);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091c:	482b      	ldr	r0, [pc, #172]	; (80009cc <display7SEG2+0x388>)
 800091e:	f001 f980 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 8000922:	e07f      	b.n	8000a24 <display7SEG2+0x3e0>
	case 8:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2180      	movs	r1, #128	; 0x80
 8000928:	4828      	ldr	r0, [pc, #160]	; (80009cc <display7SEG2+0x388>)
 800092a:	f001 f97a 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000934:	4825      	ldr	r0, [pc, #148]	; (80009cc <display7SEG2+0x388>)
 8000936:	f001 f974 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000940:	4822      	ldr	r0, [pc, #136]	; (80009cc <display7SEG2+0x388>)
 8000942:	f001 f96e 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094c:	481f      	ldr	r0, [pc, #124]	; (80009cc <display7SEG2+0x388>)
 800094e:	f001 f968 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <display7SEG2+0x388>)
 800095a:	f001 f962 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000964:	4819      	ldr	r0, [pc, #100]	; (80009cc <display7SEG2+0x388>)
 8000966:	f001 f95c 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000970:	4816      	ldr	r0, [pc, #88]	; (80009cc <display7SEG2+0x388>)
 8000972:	f001 f956 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 8000976:	e055      	b.n	8000a24 <display7SEG2+0x3e0>
	case 9:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	4813      	ldr	r0, [pc, #76]	; (80009cc <display7SEG2+0x388>)
 800097e:	f001 f950 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000988:	4810      	ldr	r0, [pc, #64]	; (80009cc <display7SEG2+0x388>)
 800098a:	f001 f94a 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <display7SEG2+0x388>)
 8000996:	f001 f944 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a0:	480a      	ldr	r0, [pc, #40]	; (80009cc <display7SEG2+0x388>)
 80009a2:	f001 f93e 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <display7SEG2+0x388>)
 80009ae:	f001 f938 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <display7SEG2+0x388>)
 80009ba:	f001 f932 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c4:	4801      	ldr	r0, [pc, #4]	; (80009cc <display7SEG2+0x388>)
 80009c6:	f001 f92c 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 80009ca:	e02b      	b.n	8000a24 <display7SEG2+0x3e0>
 80009cc:	40010c00 	.word	0x40010c00
	default:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2180      	movs	r1, #128	; 0x80
 80009d4:	4815      	ldr	r0, [pc, #84]	; (8000a2c <display7SEG2+0x3e8>)
 80009d6:	f001 f924 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e0:	4812      	ldr	r0, [pc, #72]	; (8000a2c <display7SEG2+0x3e8>)
 80009e2:	f001 f91e 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ec:	480f      	ldr	r0, [pc, #60]	; (8000a2c <display7SEG2+0x3e8>)
 80009ee:	f001 f918 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <display7SEG2+0x3e8>)
 80009fa:	f001 f912 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <display7SEG2+0x3e8>)
 8000a06:	f001 f90c 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a10:	4806      	ldr	r0, [pc, #24]	; (8000a2c <display7SEG2+0x3e8>)
 8000a12:	f001 f906 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <display7SEG2+0x3e8>)
 8000a1e:	f001 f900 	bl	8001c22 <HAL_GPIO_WritePin>
		break;
 8000a22:	bf00      	nop

	}
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40010c00 	.word	0x40010c00

08000a30 <update7SEG1>:

void update7SEG1(int index, int value) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
	int led1_display = value / 10;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <update7SEG1+0x84>)
 8000a3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a42:	1092      	asrs	r2, r2, #2
 8000a44:	17db      	asrs	r3, r3, #31
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	60fb      	str	r3, [r7, #12]
	int led2_display = value % 10;
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <update7SEG1+0x84>)
 8000a4e:	fb83 1302 	smull	r1, r3, r3, r2
 8000a52:	1099      	asrs	r1, r3, #2
 8000a54:	17d3      	asrs	r3, r2, #31
 8000a56:	1ac9      	subs	r1, r1, r3
 8000a58:	460b      	mov	r3, r1
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	60bb      	str	r3, [r7, #8]

	switch (index) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <update7SEG1+0x42>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d00e      	beq.n	8000a8e <update7SEG1+0x5e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		display7SEG1(led2_display);
		break;
	default:
		break;
 8000a70:	e01b      	b.n	8000aaa <update7SEG1+0x7a>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2110      	movs	r1, #16
 8000a76:	4810      	ldr	r0, [pc, #64]	; (8000ab8 <update7SEG1+0x88>)
 8000a78:	f001 f8d3 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2120      	movs	r1, #32
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <update7SEG1+0x88>)
 8000a82:	f001 f8ce 	bl	8001c22 <HAL_GPIO_WritePin>
		display7SEG1(led1_display);
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff fc2a 	bl	80002e0 <display7SEG1>
		break;
 8000a8c:	e00d      	b.n	8000aaa <update7SEG1+0x7a>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2110      	movs	r1, #16
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <update7SEG1+0x88>)
 8000a94:	f001 f8c5 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <update7SEG1+0x88>)
 8000a9e:	f001 f8c0 	bl	8001c22 <HAL_GPIO_WritePin>
		display7SEG1(led2_display);
 8000aa2:	68b8      	ldr	r0, [r7, #8]
 8000aa4:	f7ff fc1c 	bl	80002e0 <display7SEG1>
		break;
 8000aa8:	bf00      	nop
	}
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	66666667 	.word	0x66666667
 8000ab8:	40010800 	.word	0x40010800

08000abc <update7SEG2>:

void update7SEG2(int index, int value) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	int led3_display = value / 10;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <update7SEG2+0x84>)
 8000aca:	fb82 1203 	smull	r1, r2, r2, r3
 8000ace:	1092      	asrs	r2, r2, #2
 8000ad0:	17db      	asrs	r3, r3, #31
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	60fb      	str	r3, [r7, #12]
	int led4_display = value % 10;
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <update7SEG2+0x84>)
 8000ada:	fb83 1302 	smull	r1, r3, r3, r2
 8000ade:	1099      	asrs	r1, r3, #2
 8000ae0:	17d3      	asrs	r3, r2, #31
 8000ae2:	1ac9      	subs	r1, r1, r3
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	440b      	add	r3, r1
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	60bb      	str	r3, [r7, #8]

	switch (index) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <update7SEG2+0x42>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d00e      	beq.n	8000b1a <update7SEG2+0x5e>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
		display7SEG2(led4_display);
		break;
	default:
		break;
 8000afc:	e01b      	b.n	8000b36 <update7SEG2+0x7a>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	4810      	ldr	r0, [pc, #64]	; (8000b44 <update7SEG2+0x88>)
 8000b04:	f001 f88d 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2180      	movs	r1, #128	; 0x80
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <update7SEG2+0x88>)
 8000b0e:	f001 f888 	bl	8001c22 <HAL_GPIO_WritePin>
		display7SEG2(led3_display);
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f7ff fd96 	bl	8000644 <display7SEG2>
		break;
 8000b18:	e00d      	b.n	8000b36 <update7SEG2+0x7a>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2140      	movs	r1, #64	; 0x40
 8000b1e:	4809      	ldr	r0, [pc, #36]	; (8000b44 <update7SEG2+0x88>)
 8000b20:	f001 f87f 	bl	8001c22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <update7SEG2+0x88>)
 8000b2a:	f001 f87a 	bl	8001c22 <HAL_GPIO_WritePin>
		display7SEG2(led4_display);
 8000b2e:	68b8      	ldr	r0, [r7, #8]
 8000b30:	f7ff fd88 	bl	8000644 <display7SEG2>
		break;
 8000b34:	bf00      	nop
	}
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	66666667 	.word	0x66666667
 8000b44:	40010800 	.word	0x40010800

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fd66 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f828 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 f8ae 	bl	8000cb4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b58:	f000 f860 	bl	8000c1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <main+0x40>)
 8000b5e:	f001 fcc9 	bl	80024f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	status1 = INIT;
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <main+0x44>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
	status2 = INIT;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <main+0x48>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
	idx = 1;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <main+0x4c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
	counter = 10;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <main+0x50>)
 8000b76:	220a      	movs	r2, #10
 8000b78:	601a      	str	r2, [r3, #0]
	timeCounter = 100;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <main+0x54>)
 8000b7c:	2264      	movs	r2, #100	; 0x64
 8000b7e:	601a      	str	r2, [r3, #0]
	modeCounter = 1;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <main+0x58>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
	while (1) {
 8000b86:	e7fe      	b.n	8000b86 <main+0x3e>
 8000b88:	200000a8 	.word	0x200000a8
 8000b8c:	20000098 	.word	0x20000098
 8000b90:	2000009c 	.word	0x2000009c
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000020 	.word	0x20000020
 8000b9c:	20000004 	.word	0x20000004
 8000ba0:	20000024 	.word	0x20000024

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b090      	sub	sp, #64	; 0x40
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	2228      	movs	r2, #40	; 0x28
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 f856 	bl	8002c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 f852 	bl	8001c84 <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000be6:	f000 f8d5 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
 8000bec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fac0 	bl	8002188 <HAL_RCC_ClockConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c0e:	f000 f8c1 	bl	8000d94 <Error_Handler>
  }
}
 8000c12:	bf00      	nop
 8000c14:	3740      	adds	r7, #64	; 0x40
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c42:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c50:	2209      	movs	r2, #9
 8000c52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c60:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c62:	f001 fbf7 	bl	8002454 <HAL_TIM_Base_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c6c:	f000 f892 	bl	8000d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c7e:	f001 fd8d 	bl	800279c <HAL_TIM_ConfigClockSource>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c88:	f000 f884 	bl	8000d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c9a:	f001 ff55 	bl	8002b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ca4:	f000 f876 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000a8 	.word	0x200000a8

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <MX_GPIO_Init+0xb8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <MX_GPIO_Init+0xb8>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <MX_GPIO_Init+0xb8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <MX_GPIO_Init+0xb8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a21      	ldr	r2, [pc, #132]	; (8000d6c <MX_GPIO_Init+0xb8>)
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_GPIO_Init+0xb8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0308 	and.w	r3, r3, #8
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 8000cfe:	481c      	ldr	r0, [pc, #112]	; (8000d70 <MX_GPIO_Init+0xbc>)
 8000d00:	f000 ff8f 	bl	8001c22 <HAL_GPIO_WritePin>
                          |R1_Pin|G1_Pin|Y1_Pin|R2_Pin
                          |G2_Pin|Y2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG03_Pin
 8000d04:	2200      	movs	r2, #0
 8000d06:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000d0a:	481a      	ldr	r0, [pc, #104]	; (8000d74 <MX_GPIO_Init+0xc0>)
 8000d0c:	f000 ff89 	bl	8001c22 <HAL_GPIO_WritePin>
                          |SEG04_Pin|SEG05_Pin|SEG06_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG00_Pin
                          |SEG01_Pin|SEG02_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8000d10:	230e      	movs	r3, #14
 8000d12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	4619      	mov	r1, r3
 8000d22:	4813      	ldr	r0, [pc, #76]	; (8000d70 <MX_GPIO_Init+0xbc>)
 8000d24:	f000 fdea 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           R1_Pin G1_Pin Y1_Pin R2_Pin
                           G2_Pin Y2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000d28:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000d2c:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|G1_Pin|Y1_Pin|R2_Pin
                          |G2_Pin|Y2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2302      	movs	r3, #2
 8000d38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <MX_GPIO_Init+0xbc>)
 8000d42:	f000 fddb 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG03_Pin
                           SEG04_Pin SEG05_Pin SEG06_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG00_Pin
                           SEG01_Pin SEG02_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG03_Pin
 8000d46:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000d4a:	60bb      	str	r3, [r7, #8]
                          |SEG04_Pin|SEG05_Pin|SEG06_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG00_Pin
                          |SEG01_Pin|SEG02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2302      	movs	r3, #2
 8000d56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_GPIO_Init+0xc0>)
 8000d60:	f000 fdcc 	bl	80018fc <HAL_GPIO_Init>

}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010800 	.word	0x40010800
 8000d74:	40010c00 	.word	0x40010c00

08000d78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000d80:	f000 fb4a 	bl	8001418 <timerRun>
	fsm_control();
 8000d84:	f000 f80c 	bl	8000da0 <fsm_control>
//	mode2_control();
	getKeyInput();
 8000d88:	f7ff fa0a 	bl	80001a0 <getKeyInput>


}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <fsm_control>:
 *      Author: Linh
 */

#include "mode_control.h"

void fsm_control() {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1) {
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff f9d1 	bl	800014c <isButtonPressed>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d10b      	bne.n	8000dc8 <fsm_control+0x28>
		modeCounter++;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <fsm_control+0x68>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <fsm_control+0x68>)
 8000db8:	6013      	str	r3, [r2, #0]
		if (modeCounter > 4) {
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <fsm_control+0x68>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	dd02      	ble.n	8000dc8 <fsm_control+0x28>
			modeCounter = 1;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <fsm_control+0x68>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]
		}
	}

	switch (modeCounter) {
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <fsm_control+0x68>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d816      	bhi.n	8000e00 <fsm_control+0x60>
 8000dd2:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <fsm_control+0x38>)
 8000dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd8:	08000de9 	.word	0x08000de9
 8000ddc:	08000def 	.word	0x08000def
 8000de0:	08000df5 	.word	0x08000df5
 8000de4:	08000dfb 	.word	0x08000dfb
	case 1:
		mode1_control();
 8000de8:	f000 f810 	bl	8000e0c <mode1_control>
		break;
 8000dec:	e009      	b.n	8000e02 <fsm_control+0x62>
	case 2:
		mode2_control();
 8000dee:	f000 f8b5 	bl	8000f5c <mode2_control>
		break;
 8000df2:	e006      	b.n	8000e02 <fsm_control+0x62>
	case 3:
		mode3_control();
 8000df4:	f000 f94c 	bl	8001090 <mode3_control>
		break;
 8000df8:	e003      	b.n	8000e02 <fsm_control+0x62>
	case 4:
		mode4_control();
 8000dfa:	f000 f9e3 	bl	80011c4 <mode4_control>
		break;
 8000dfe:	e000      	b.n	8000e02 <fsm_control+0x62>
	default:
		break;
 8000e00:	bf00      	nop
	}
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000024 	.word	0x20000024

08000e0c <mode1_control>:

void mode1_control() {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	if (timeCounter == 0) {
 8000e10:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <mode1_control+0x134>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d160      	bne.n	8000eda <mode1_control+0xce>
		timeCounter = 100;
 8000e18:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <mode1_control+0x134>)
 8000e1a:	2264      	movs	r2, #100	; 0x64
 8000e1c:	601a      	str	r2, [r3, #0]

		if (counter == 0) {
 8000e1e:	4b49      	ldr	r3, [pc, #292]	; (8000f44 <mode1_control+0x138>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d109      	bne.n	8000e3a <mode1_control+0x2e>
			counter = redTime + greenTime + yellowTime;
 8000e26:	4b48      	ldr	r3, [pc, #288]	; (8000f48 <mode1_control+0x13c>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	4b48      	ldr	r3, [pc, #288]	; (8000f4c <mode1_control+0x140>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	441a      	add	r2, r3
 8000e30:	4b47      	ldr	r3, [pc, #284]	; (8000f50 <mode1_control+0x144>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a43      	ldr	r2, [pc, #268]	; (8000f44 <mode1_control+0x138>)
 8000e38:	6013      	str	r3, [r2, #0]
		}

		if (counter == redTime + greenTime + yellowTime) {
 8000e3a:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <mode1_control+0x13c>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b43      	ldr	r3, [pc, #268]	; (8000f4c <mode1_control+0x140>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	441a      	add	r2, r3
 8000e44:	4b42      	ldr	r3, [pc, #264]	; (8000f50 <mode1_control+0x144>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	441a      	add	r2, r3
 8000e4a:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <mode1_control+0x138>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d10c      	bne.n	8000e6c <mode1_control+0x60>
			//Red1 led and Green2 led on.
			//Red1 led
			setRed1Light();
 8000e52:	f000 fa51 	bl	80012f8 <setRed1Light>
			time1_display = redTime;
 8000e56:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <mode1_control+0x13c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a3e      	ldr	r2, [pc, #248]	; (8000f54 <mode1_control+0x148>)
 8000e5c:	6013      	str	r3, [r2, #0]
			//Green2 led
			setGreen2Light();
 8000e5e:	f000 faab 	bl	80013b8 <setGreen2Light>
			time2_display = greenTime;
 8000e62:	4b3a      	ldr	r3, [pc, #232]	; (8000f4c <mode1_control+0x140>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a3c      	ldr	r2, [pc, #240]	; (8000f58 <mode1_control+0x14c>)
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	e031      	b.n	8000ed0 <mode1_control+0xc4>
		}

		else if (counter == redTime + yellowTime) {
 8000e6c:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <mode1_control+0x13c>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b37      	ldr	r3, [pc, #220]	; (8000f50 <mode1_control+0x144>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	441a      	add	r2, r3
 8000e76:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <mode1_control+0x138>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d106      	bne.n	8000e8c <mode1_control+0x80>
			//Red1 led and Yellow2 led on.
			//Yellow2 led
			setYellow2Light();
 8000e7e:	f000 fab3 	bl	80013e8 <setYellow2Light>
			time2_display = yellowTime;
 8000e82:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <mode1_control+0x144>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a34      	ldr	r2, [pc, #208]	; (8000f58 <mode1_control+0x14c>)
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e021      	b.n	8000ed0 <mode1_control+0xc4>
		}

		else if (counter == greenTime + yellowTime) {
 8000e8c:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <mode1_control+0x140>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <mode1_control+0x144>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	441a      	add	r2, r3
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <mode1_control+0x138>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d10c      	bne.n	8000eb8 <mode1_control+0xac>
			//Green1 led and Red2 led on.
			//Green1 led
			setGreen1Light();
 8000e9e:	f000 fa43 	bl	8001328 <setGreen1Light>
			time1_display = greenTime;
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <mode1_control+0x140>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a2b      	ldr	r2, [pc, #172]	; (8000f54 <mode1_control+0x148>)
 8000ea8:	6013      	str	r3, [r2, #0]
			//Red2 led
			setRed2Light();
 8000eaa:	f000 fa6d 	bl	8001388 <setRed2Light>
			time2_display = redTime;
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <mode1_control+0x13c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a29      	ldr	r2, [pc, #164]	; (8000f58 <mode1_control+0x14c>)
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e00b      	b.n	8000ed0 <mode1_control+0xc4>
		}

		else if (counter == yellowTime) {
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <mode1_control+0x138>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <mode1_control+0x144>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d105      	bne.n	8000ed0 <mode1_control+0xc4>
			//Yellow1 led and Red2 led on.
			//Yellow1 led
			setYellow1Light();
 8000ec4:	f000 fa48 	bl	8001358 <setYellow1Light>
			time1_display = yellowTime;
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <mode1_control+0x144>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <mode1_control+0x148>)
 8000ece:	6013      	str	r3, [r2, #0]
		}

		counter--;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <mode1_control+0x138>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <mode1_control+0x138>)
 8000ed8:	6013      	str	r3, [r2, #0]
	}

	if (timeCounter == 100) {
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <mode1_control+0x134>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b64      	cmp	r3, #100	; 0x64
 8000ee0:	d10c      	bne.n	8000efc <mode1_control+0xf0>
		update7SEG1(0, time1_display);
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <mode1_control+0x148>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff fda1 	bl	8000a30 <update7SEG1>
		update7SEG2(0, time2_display);
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <mode1_control+0x14c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff fde1 	bl	8000abc <update7SEG2>
 8000efa:	e019      	b.n	8000f30 <mode1_control+0x124>
	}

	else if (timeCounter == 50) {
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <mode1_control+0x134>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b32      	cmp	r3, #50	; 0x32
 8000f02:	d115      	bne.n	8000f30 <mode1_control+0x124>
		update7SEG1(1, time1_display);
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <mode1_control+0x148>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff fd90 	bl	8000a30 <update7SEG1>
		update7SEG2(1, time2_display);
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <mode1_control+0x14c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	2001      	movs	r0, #1
 8000f18:	f7ff fdd0 	bl	8000abc <update7SEG2>

		time1_display--;
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <mode1_control+0x148>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <mode1_control+0x148>)
 8000f24:	6013      	str	r3, [r2, #0]
		time2_display--;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <mode1_control+0x14c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <mode1_control+0x14c>)
 8000f2e:	6013      	str	r3, [r2, #0]
	}

	timeCounter--;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <mode1_control+0x134>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	4a02      	ldr	r2, [pc, #8]	; (8000f40 <mode1_control+0x134>)
 8000f38:	6013      	str	r3, [r2, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000004 	.word	0x20000004
 8000f44:	20000020 	.word	0x20000020
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	2000000c 	.word	0x2000000c
 8000f50:	20000010 	.word	0x20000010
 8000f54:	200000a0 	.word	0x200000a0
 8000f58:	200000a4 	.word	0x200000a4

08000f5c <mode2_control>:

void mode2_control() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	green_temp = greenTime;
 8000f60:	4b41      	ldr	r3, [pc, #260]	; (8001068 <mode2_control+0x10c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a41      	ldr	r2, [pc, #260]	; (800106c <mode2_control+0x110>)
 8000f66:	6013      	str	r3, [r2, #0]
	time2_display = 2;
 8000f68:	4b41      	ldr	r3, [pc, #260]	; (8001070 <mode2_control+0x114>)
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	601a      	str	r2, [r3, #0]
	time1_display = red_temp;
 8000f6e:	4b41      	ldr	r3, [pc, #260]	; (8001074 <mode2_control+0x118>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a41      	ldr	r2, [pc, #260]	; (8001078 <mode2_control+0x11c>)
 8000f74:	6013      	str	r3, [r2, #0]

	//button2 is pressed
	if (isButtonPressed(1) == 1) {
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff f8e8 	bl	800014c <isButtonPressed>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d10f      	bne.n	8000fa2 <mode2_control+0x46>
		red_temp++;
 8000f82:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <mode2_control+0x118>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a3a      	ldr	r2, [pc, #232]	; (8001074 <mode2_control+0x118>)
 8000f8a:	6013      	str	r3, [r2, #0]
		if (red_temp > 99) {
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <mode2_control+0x118>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b63      	cmp	r3, #99	; 0x63
 8000f92:	dd02      	ble.n	8000f9a <mode2_control+0x3e>
			red_temp = 1;
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <mode2_control+0x118>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	601a      	str	r2, [r3, #0]
		}
		time1_display = red_temp;
 8000f9a:	4b36      	ldr	r3, [pc, #216]	; (8001074 <mode2_control+0x118>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a36      	ldr	r2, [pc, #216]	; (8001078 <mode2_control+0x11c>)
 8000fa0:	6013      	str	r3, [r2, #0]
	}

	//button3 is pressed
	if (isButtonPressed(2) == 1) {
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f7ff f8d2 	bl	800014c <isButtonPressed>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d111      	bne.n	8000fd2 <mode2_control+0x76>
		redTime = red_temp;
 8000fae:	4b31      	ldr	r3, [pc, #196]	; (8001074 <mode2_control+0x118>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a32      	ldr	r2, [pc, #200]	; (800107c <mode2_control+0x120>)
 8000fb4:	6013      	str	r3, [r2, #0]
		counter = redTime + greenTime + yellowTime;
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <mode2_control+0x120>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <mode2_control+0x10c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	441a      	add	r2, r3
 8000fc0:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <mode2_control+0x124>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a2f      	ldr	r2, [pc, #188]	; (8001084 <mode2_control+0x128>)
 8000fc8:	6013      	str	r3, [r2, #0]
		time1_display = redTime;
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <mode2_control+0x120>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a2a      	ldr	r2, [pc, #168]	; (8001078 <mode2_control+0x11c>)
 8000fd0:	6013      	str	r3, [r2, #0]
	}

	if (timeCounter == 0) {
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <mode2_control+0x12c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <mode2_control+0x84>
		timeCounter = 100;
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <mode2_control+0x12c>)
 8000fdc:	2264      	movs	r2, #100	; 0x64
 8000fde:	601a      	str	r2, [r3, #0]
	}

	if (timeCounter == 100 || timeCounter == 50) {
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <mode2_control+0x12c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b64      	cmp	r3, #100	; 0x64
 8000fe6:	d003      	beq.n	8000ff0 <mode2_control+0x94>
 8000fe8:	4b27      	ldr	r3, [pc, #156]	; (8001088 <mode2_control+0x12c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b32      	cmp	r3, #50	; 0x32
 8000fee:	d12a      	bne.n	8001046 <mode2_control+0xea>
		HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8000ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff4:	4825      	ldr	r0, [pc, #148]	; (800108c <mode2_control+0x130>)
 8000ff6:	f000 fe2c 	bl	8001c52 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 8000ffa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffe:	4823      	ldr	r0, [pc, #140]	; (800108c <mode2_control+0x130>)
 8001000:	f000 fe27 	bl	8001c52 <HAL_GPIO_TogglePin>

		if (timeCounter == 100) {
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <mode2_control+0x12c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b64      	cmp	r3, #100	; 0x64
 800100a:	d10c      	bne.n	8001026 <mode2_control+0xca>
			update7SEG1(0, time1_display);
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <mode2_control+0x11c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff fd0c 	bl	8000a30 <update7SEG1>
			update7SEG2(0, time2_display);
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <mode2_control+0x114>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff fd4c 	bl	8000abc <update7SEG2>
 8001024:	e00f      	b.n	8001046 <mode2_control+0xea>
		} else if (timeCounter == 50) {
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <mode2_control+0x12c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b32      	cmp	r3, #50	; 0x32
 800102c:	d10b      	bne.n	8001046 <mode2_control+0xea>
			update7SEG1(1, time1_display);
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <mode2_control+0x11c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4619      	mov	r1, r3
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff fcfb 	bl	8000a30 <update7SEG1>
			update7SEG2(1, time2_display);
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <mode2_control+0x114>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff fd3b 	bl	8000abc <update7SEG2>
		}
	}

	counter = redTime + greenTime + yellowTime;
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <mode2_control+0x120>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <mode2_control+0x10c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	441a      	add	r2, r3
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <mode2_control+0x124>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4413      	add	r3, r2
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <mode2_control+0x128>)
 8001058:	6013      	str	r3, [r2, #0]
	timeCounter--;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <mode2_control+0x12c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	4a09      	ldr	r2, [pc, #36]	; (8001088 <mode2_control+0x12c>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000000c 	.word	0x2000000c
 800106c:	20000018 	.word	0x20000018
 8001070:	200000a4 	.word	0x200000a4
 8001074:	20000014 	.word	0x20000014
 8001078:	200000a0 	.word	0x200000a0
 800107c:	20000008 	.word	0x20000008
 8001080:	20000010 	.word	0x20000010
 8001084:	20000020 	.word	0x20000020
 8001088:	20000004 	.word	0x20000004
 800108c:	40010800 	.word	0x40010800

08001090 <mode3_control>:

void mode3_control() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	red_temp = redTime;
 8001094:	4b41      	ldr	r3, [pc, #260]	; (800119c <mode3_control+0x10c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a41      	ldr	r2, [pc, #260]	; (80011a0 <mode3_control+0x110>)
 800109a:	6013      	str	r3, [r2, #0]
	time2_display = 3;
 800109c:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <mode3_control+0x114>)
 800109e:	2203      	movs	r2, #3
 80010a0:	601a      	str	r2, [r3, #0]
	time1_display = yellow_temp;
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <mode3_control+0x118>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a41      	ldr	r2, [pc, #260]	; (80011ac <mode3_control+0x11c>)
 80010a8:	6013      	str	r3, [r2, #0]

	//button2 is pressed
	if (isButtonPressed(1) == 1) {
 80010aa:	2001      	movs	r0, #1
 80010ac:	f7ff f84e 	bl	800014c <isButtonPressed>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d10f      	bne.n	80010d6 <mode3_control+0x46>
		yellow_temp++;
 80010b6:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <mode3_control+0x118>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a3a      	ldr	r2, [pc, #232]	; (80011a8 <mode3_control+0x118>)
 80010be:	6013      	str	r3, [r2, #0]
		if (yellow_temp > 99) {
 80010c0:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <mode3_control+0x118>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b63      	cmp	r3, #99	; 0x63
 80010c6:	dd02      	ble.n	80010ce <mode3_control+0x3e>
			yellow_temp = 1;
 80010c8:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <mode3_control+0x118>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
		}
		time1_display = yellow_temp;
 80010ce:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <mode3_control+0x118>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a36      	ldr	r2, [pc, #216]	; (80011ac <mode3_control+0x11c>)
 80010d4:	6013      	str	r3, [r2, #0]
	}

	//button3 is pressed
	if (isButtonPressed(2) == 1) {
 80010d6:	2002      	movs	r0, #2
 80010d8:	f7ff f838 	bl	800014c <isButtonPressed>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d111      	bne.n	8001106 <mode3_control+0x76>
		yellowTime = yellow_temp;
 80010e2:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <mode3_control+0x118>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a32      	ldr	r2, [pc, #200]	; (80011b0 <mode3_control+0x120>)
 80010e8:	6013      	str	r3, [r2, #0]
		counter = redTime + greenTime + yellowTime;
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <mode3_control+0x10c>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <mode3_control+0x124>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	441a      	add	r2, r3
 80010f4:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <mode3_control+0x120>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4413      	add	r3, r2
 80010fa:	4a2f      	ldr	r2, [pc, #188]	; (80011b8 <mode3_control+0x128>)
 80010fc:	6013      	str	r3, [r2, #0]
		time1_display = yellowTime;
 80010fe:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <mode3_control+0x120>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a2a      	ldr	r2, [pc, #168]	; (80011ac <mode3_control+0x11c>)
 8001104:	6013      	str	r3, [r2, #0]
	}

	if (timeCounter == 0) {
 8001106:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <mode3_control+0x12c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d102      	bne.n	8001114 <mode3_control+0x84>
		timeCounter = 100;
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <mode3_control+0x12c>)
 8001110:	2264      	movs	r2, #100	; 0x64
 8001112:	601a      	str	r2, [r3, #0]
	}

	if (timeCounter == 100 || timeCounter == 50) {
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <mode3_control+0x12c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b64      	cmp	r3, #100	; 0x64
 800111a:	d003      	beq.n	8001124 <mode3_control+0x94>
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <mode3_control+0x12c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b32      	cmp	r3, #50	; 0x32
 8001122:	d12a      	bne.n	800117a <mode3_control+0xea>
		HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8001124:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001128:	4825      	ldr	r0, [pc, #148]	; (80011c0 <mode3_control+0x130>)
 800112a:	f000 fd92 	bl	8001c52 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Y2_GPIO_Port, Y2_Pin);
 800112e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001132:	4823      	ldr	r0, [pc, #140]	; (80011c0 <mode3_control+0x130>)
 8001134:	f000 fd8d 	bl	8001c52 <HAL_GPIO_TogglePin>

		if (timeCounter == 100) {
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <mode3_control+0x12c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b64      	cmp	r3, #100	; 0x64
 800113e:	d10c      	bne.n	800115a <mode3_control+0xca>
			update7SEG1(0, time1_display);
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <mode3_control+0x11c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff fc72 	bl	8000a30 <update7SEG1>
			update7SEG2(0, time2_display);
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <mode3_control+0x114>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff fcb2 	bl	8000abc <update7SEG2>
 8001158:	e00f      	b.n	800117a <mode3_control+0xea>
		} else if (timeCounter == 50) {
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <mode3_control+0x12c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b32      	cmp	r3, #50	; 0x32
 8001160:	d10b      	bne.n	800117a <mode3_control+0xea>
			update7SEG1(1, time1_display);
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <mode3_control+0x11c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4619      	mov	r1, r3
 8001168:	2001      	movs	r0, #1
 800116a:	f7ff fc61 	bl	8000a30 <update7SEG1>
			update7SEG2(1, time2_display);
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <mode3_control+0x114>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fca1 	bl	8000abc <update7SEG2>
		}
	}

	counter = redTime + greenTime + yellowTime;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <mode3_control+0x10c>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <mode3_control+0x124>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	441a      	add	r2, r3
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <mode3_control+0x120>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4413      	add	r3, r2
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <mode3_control+0x128>)
 800118c:	6013      	str	r3, [r2, #0]
	timeCounter--;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <mode3_control+0x12c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3b01      	subs	r3, #1
 8001194:	4a09      	ldr	r2, [pc, #36]	; (80011bc <mode3_control+0x12c>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000014 	.word	0x20000014
 80011a4:	200000a4 	.word	0x200000a4
 80011a8:	2000001c 	.word	0x2000001c
 80011ac:	200000a0 	.word	0x200000a0
 80011b0:	20000010 	.word	0x20000010
 80011b4:	2000000c 	.word	0x2000000c
 80011b8:	20000020 	.word	0x20000020
 80011bc:	20000004 	.word	0x20000004
 80011c0:	40010800 	.word	0x40010800

080011c4 <mode4_control>:

void mode4_control() {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	yellow_temp = yellowTime;
 80011c8:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <mode4_control+0x10c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a41      	ldr	r2, [pc, #260]	; (80012d4 <mode4_control+0x110>)
 80011ce:	6013      	str	r3, [r2, #0]
	time2_display = 4;
 80011d0:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <mode4_control+0x114>)
 80011d2:	2204      	movs	r2, #4
 80011d4:	601a      	str	r2, [r3, #0]
	time1_display = green_temp;
 80011d6:	4b41      	ldr	r3, [pc, #260]	; (80012dc <mode4_control+0x118>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a41      	ldr	r2, [pc, #260]	; (80012e0 <mode4_control+0x11c>)
 80011dc:	6013      	str	r3, [r2, #0]

	//button2 is pressed
	if (isButtonPressed(1) == 1) {
 80011de:	2001      	movs	r0, #1
 80011e0:	f7fe ffb4 	bl	800014c <isButtonPressed>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10f      	bne.n	800120a <mode4_control+0x46>
		green_temp++;
 80011ea:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <mode4_control+0x118>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a3a      	ldr	r2, [pc, #232]	; (80012dc <mode4_control+0x118>)
 80011f2:	6013      	str	r3, [r2, #0]
		if (green_temp > 99) {
 80011f4:	4b39      	ldr	r3, [pc, #228]	; (80012dc <mode4_control+0x118>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b63      	cmp	r3, #99	; 0x63
 80011fa:	dd02      	ble.n	8001202 <mode4_control+0x3e>
			green_temp = 1;
 80011fc:	4b37      	ldr	r3, [pc, #220]	; (80012dc <mode4_control+0x118>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]
		}
		time1_display = green_temp;
 8001202:	4b36      	ldr	r3, [pc, #216]	; (80012dc <mode4_control+0x118>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a36      	ldr	r2, [pc, #216]	; (80012e0 <mode4_control+0x11c>)
 8001208:	6013      	str	r3, [r2, #0]
	}

	//button3 is pressed
	if (isButtonPressed(2) == 1) {
 800120a:	2002      	movs	r0, #2
 800120c:	f7fe ff9e 	bl	800014c <isButtonPressed>
 8001210:	4603      	mov	r3, r0
 8001212:	2b01      	cmp	r3, #1
 8001214:	d111      	bne.n	800123a <mode4_control+0x76>
		greenTime = green_temp;
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <mode4_control+0x118>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <mode4_control+0x120>)
 800121c:	6013      	str	r3, [r2, #0]
		counter = redTime + greenTime + yellowTime;
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <mode4_control+0x124>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <mode4_control+0x120>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	441a      	add	r2, r3
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <mode4_control+0x10c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4413      	add	r3, r2
 800122e:	4a2f      	ldr	r2, [pc, #188]	; (80012ec <mode4_control+0x128>)
 8001230:	6013      	str	r3, [r2, #0]
		time1_display = greenTime;
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <mode4_control+0x120>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <mode4_control+0x11c>)
 8001238:	6013      	str	r3, [r2, #0]
	}

	if (timeCounter == 0) {
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <mode4_control+0x12c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <mode4_control+0x84>
		timeCounter = 100;
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <mode4_control+0x12c>)
 8001244:	2264      	movs	r2, #100	; 0x64
 8001246:	601a      	str	r2, [r3, #0]
	}

	if (timeCounter == 100 || timeCounter == 50) {
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <mode4_control+0x12c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b64      	cmp	r3, #100	; 0x64
 800124e:	d003      	beq.n	8001258 <mode4_control+0x94>
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <mode4_control+0x12c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b32      	cmp	r3, #50	; 0x32
 8001256:	d12a      	bne.n	80012ae <mode4_control+0xea>
		HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 8001258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125c:	4825      	ldr	r0, [pc, #148]	; (80012f4 <mode4_control+0x130>)
 800125e:	f000 fcf8 	bl	8001c52 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 8001262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001266:	4823      	ldr	r0, [pc, #140]	; (80012f4 <mode4_control+0x130>)
 8001268:	f000 fcf3 	bl	8001c52 <HAL_GPIO_TogglePin>

		if (timeCounter == 100) {
 800126c:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <mode4_control+0x12c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b64      	cmp	r3, #100	; 0x64
 8001272:	d10c      	bne.n	800128e <mode4_control+0xca>
			update7SEG1(0, time1_display);
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <mode4_control+0x11c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff fbd8 	bl	8000a30 <update7SEG1>
			update7SEG2(0, time2_display);
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <mode4_control+0x114>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fc18 	bl	8000abc <update7SEG2>
 800128c:	e00f      	b.n	80012ae <mode4_control+0xea>
		} else if (timeCounter == 50) {
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <mode4_control+0x12c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b32      	cmp	r3, #50	; 0x32
 8001294:	d10b      	bne.n	80012ae <mode4_control+0xea>
			update7SEG1(1, time1_display);
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <mode4_control+0x11c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4619      	mov	r1, r3
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff fbc7 	bl	8000a30 <update7SEG1>
			update7SEG2(1, time2_display);
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <mode4_control+0x114>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4619      	mov	r1, r3
 80012a8:	2001      	movs	r0, #1
 80012aa:	f7ff fc07 	bl	8000abc <update7SEG2>
		}
	}

	counter = redTime + greenTime + yellowTime;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <mode4_control+0x124>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <mode4_control+0x120>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	441a      	add	r2, r3
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <mode4_control+0x10c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <mode4_control+0x128>)
 80012c0:	6013      	str	r3, [r2, #0]
	timeCounter--;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <mode4_control+0x12c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <mode4_control+0x12c>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000010 	.word	0x20000010
 80012d4:	2000001c 	.word	0x2000001c
 80012d8:	200000a4 	.word	0x200000a4
 80012dc:	20000018 	.word	0x20000018
 80012e0:	200000a0 	.word	0x200000a0
 80012e4:	2000000c 	.word	0x2000000c
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000020 	.word	0x20000020
 80012f0:	20000004 	.word	0x20000004
 80012f4:	40010800 	.word	0x40010800

080012f8 <setRed1Light>:
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
}

void setRed1Light() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001302:	4808      	ldr	r0, [pc, #32]	; (8001324 <setRed1Light+0x2c>)
 8001304:	f000 fc8d 	bl	8001c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <setRed1Light+0x2c>)
 8001310:	f000 fc87 	bl	8001c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131a:	4802      	ldr	r0, [pc, #8]	; (8001324 <setRed1Light+0x2c>)
 800131c:	f000 fc81 	bl	8001c22 <HAL_GPIO_WritePin>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40010800 	.word	0x40010800

08001328 <setGreen1Light>:

void setGreen1Light() {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <setGreen1Light+0x2c>)
 8001334:	f000 fc75 	bl	8001c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <setGreen1Light+0x2c>)
 8001340:	f000 fc6f 	bl	8001c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800134a:	4802      	ldr	r0, [pc, #8]	; (8001354 <setGreen1Light+0x2c>)
 800134c:	f000 fc69 	bl	8001c22 <HAL_GPIO_WritePin>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40010800 	.word	0x40010800

08001358 <setYellow1Light>:

void setYellow1Light() {
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001362:	4808      	ldr	r0, [pc, #32]	; (8001384 <setYellow1Light+0x2c>)
 8001364:	f000 fc5d 	bl	8001c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <setYellow1Light+0x2c>)
 8001370:	f000 fc57 	bl	8001c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800137a:	4802      	ldr	r0, [pc, #8]	; (8001384 <setYellow1Light+0x2c>)
 800137c:	f000 fc51 	bl	8001c22 <HAL_GPIO_WritePin>
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40010800 	.word	0x40010800

08001388 <setRed2Light>:

void setRed2Light() {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001392:	4808      	ldr	r0, [pc, #32]	; (80013b4 <setRed2Light+0x2c>)
 8001394:	f000 fc45 	bl	8001c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <setRed2Light+0x2c>)
 80013a0:	f000 fc3f 	bl	8001c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013aa:	4802      	ldr	r0, [pc, #8]	; (80013b4 <setRed2Light+0x2c>)
 80013ac:	f000 fc39 	bl	8001c22 <HAL_GPIO_WritePin>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40010800 	.word	0x40010800

080013b8 <setGreen2Light>:

void setGreen2Light() {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013c2:	4808      	ldr	r0, [pc, #32]	; (80013e4 <setGreen2Light+0x2c>)
 80013c4:	f000 fc2d 	bl	8001c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <setGreen2Light+0x2c>)
 80013d0:	f000 fc27 	bl	8001c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013da:	4802      	ldr	r0, [pc, #8]	; (80013e4 <setGreen2Light+0x2c>)
 80013dc:	f000 fc21 	bl	8001c22 <HAL_GPIO_WritePin>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40010800 	.word	0x40010800

080013e8 <setYellow2Light>:

void setYellow2Light() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f2:	4808      	ldr	r0, [pc, #32]	; (8001414 <setYellow2Light+0x2c>)
 80013f4:	f000 fc15 	bl	8001c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <setYellow2Light+0x2c>)
 8001400:	f000 fc0f 	bl	8001c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140a:	4802      	ldr	r0, [pc, #8]	; (8001414 <setYellow2Light+0x2c>)
 800140c:	f000 fc09 	bl	8001c22 <HAL_GPIO_WritePin>
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40010800 	.word	0x40010800

08001418 <timerRun>:
void setTimer4(int duration) {
	timer4_counter = duration / TICK;
	timer4_flag = 0;
}

void timerRun() {
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <timerRun+0x9c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	dd04      	ble.n	800142e <timerRun+0x16>
		timer1_counter--;
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <timerRun+0x9c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3b01      	subs	r3, #1
 800142a:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <timerRun+0x9c>)
 800142c:	6013      	str	r3, [r2, #0]
	}
	if (timer1_counter <= 0) {
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <timerRun+0x9c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	dc04      	bgt.n	8001440 <timerRun+0x28>
		timer1_flag++;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <timerRun+0xa0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <timerRun+0xa0>)
 800143e:	6013      	str	r3, [r2, #0]
	}
	if (timer2_counter > 0) {
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <timerRun+0xa4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	dd04      	ble.n	8001452 <timerRun+0x3a>
		timer2_counter--;
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <timerRun+0xa4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3b01      	subs	r3, #1
 800144e:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <timerRun+0xa4>)
 8001450:	6013      	str	r3, [r2, #0]
	}
	if (timer2_counter <= 0) {
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <timerRun+0xa4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	dc04      	bgt.n	8001464 <timerRun+0x4c>
		timer2_flag++;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <timerRun+0xa8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <timerRun+0xa8>)
 8001462:	6013      	str	r3, [r2, #0]
	}
	if (timer3_counter > 0) {
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <timerRun+0xac>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	dd04      	ble.n	8001476 <timerRun+0x5e>
		timer3_counter--;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <timerRun+0xac>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <timerRun+0xac>)
 8001474:	6013      	str	r3, [r2, #0]
	}
	if (timer3_counter <= 0) {
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <timerRun+0xac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	dc04      	bgt.n	8001488 <timerRun+0x70>
		timer3_flag++;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <timerRun+0xb0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <timerRun+0xb0>)
 8001486:	6013      	str	r3, [r2, #0]
	}
	if (timer4_counter > 0) {
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <timerRun+0xb4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	dd04      	ble.n	800149a <timerRun+0x82>
		timer4_counter--;
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <timerRun+0xb4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3b01      	subs	r3, #1
 8001496:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <timerRun+0xb4>)
 8001498:	6013      	str	r3, [r2, #0]
	}
	if (timer4_counter <= 0) {
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <timerRun+0xb4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	dc04      	bgt.n	80014ac <timerRun+0x94>
		timer4_flag++;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <timerRun+0xb8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	4a09      	ldr	r2, [pc, #36]	; (80014d0 <timerRun+0xb8>)
 80014aa:	6013      	str	r3, [r2, #0]
	}
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	200000f4 	.word	0x200000f4
 80014b8:	200000f0 	.word	0x200000f0
 80014bc:	200000fc 	.word	0x200000fc
 80014c0:	200000f8 	.word	0x200000f8
 80014c4:	20000104 	.word	0x20000104
 80014c8:	20000100 	.word	0x20000100
 80014cc:	2000010c 	.word	0x2000010c
 80014d0:	20000108 	.word	0x20000108

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_MspInit+0x40>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <HAL_MspInit+0x40>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6193      	str	r3, [r2, #24]
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_MspInit+0x40>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_MspInit+0x40>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_MspInit+0x40>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_MspInit+0x40>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001528:	d113      	bne.n	8001552 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_TIM_Base_MspInit+0x44>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <HAL_TIM_Base_MspInit+0x44>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	61d3      	str	r3, [r2, #28]
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_TIM_Base_MspInit+0x44>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	201c      	movs	r0, #28
 8001548:	f000 f9a1 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800154c:	201c      	movs	r0, #28
 800154e:	f000 f9ba 	bl	80018c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a6:	f000 f87f 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM2_IRQHandler+0x10>)
 80015b6:	f000 ffe9 	bl	800258c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200000a8 	.word	0x200000a8

080015c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015d2:	490d      	ldr	r1, [pc, #52]	; (8001608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e8:	4c0a      	ldr	r4, [pc, #40]	; (8001614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015f6:	f7ff ffe5 	bl	80015c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f001 fb0f 	bl	8002c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015fe:	f7ff faa3 	bl	8000b48 <main>
  bx lr
 8001602:	4770      	bx	lr
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800160c:	08002cb4 	.word	0x08002cb4
  ldr r2, =_sbss
 8001610:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001614:	20000114 	.word	0x20000114

08001618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC1_2_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_Init+0x28>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_Init+0x28>)
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f923 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	200f      	movs	r0, #15
 8001634:	f000 f808 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f7ff ff4c 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40022000 	.word	0x40022000

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x54>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x58>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f93b 	bl	80018e2 <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f000 f903 	bl	800188e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_InitTick+0x5c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000028 	.word	0x20000028
 80016a0:	20000030 	.word	0x20000030
 80016a4:	2000002c 	.word	0x2000002c

080016a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_IncTick+0x1c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_IncTick+0x20>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a03      	ldr	r2, [pc, #12]	; (80016c8 <HAL_IncTick+0x20>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000030 	.word	0x20000030
 80016c8:	20000110 	.word	0x20000110

080016cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b02      	ldr	r3, [pc, #8]	; (80016dc <HAL_GetTick+0x10>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	20000110 	.word	0x20000110

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4906      	ldr	r1, [pc, #24]	; (8001778 <__NVIC_EnableIRQ+0x34>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f7ff ff90 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff2d 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff42 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff90 	bl	80017d0 <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5f 	bl	800177c <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff35 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffa2 	bl	8001834 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b08b      	sub	sp, #44	; 0x2c
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190e:	e161      	b.n	8001bd4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001910:	2201      	movs	r2, #1
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 8150 	bne.w	8001bce <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a97      	ldr	r2, [pc, #604]	; (8001b90 <HAL_GPIO_Init+0x294>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d05e      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001938:	4a95      	ldr	r2, [pc, #596]	; (8001b90 <HAL_GPIO_Init+0x294>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d875      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800193e:	4a95      	ldr	r2, [pc, #596]	; (8001b94 <HAL_GPIO_Init+0x298>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d058      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001944:	4a93      	ldr	r2, [pc, #588]	; (8001b94 <HAL_GPIO_Init+0x298>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d86f      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800194a:	4a93      	ldr	r2, [pc, #588]	; (8001b98 <HAL_GPIO_Init+0x29c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d052      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001950:	4a91      	ldr	r2, [pc, #580]	; (8001b98 <HAL_GPIO_Init+0x29c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d869      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001956:	4a91      	ldr	r2, [pc, #580]	; (8001b9c <HAL_GPIO_Init+0x2a0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d04c      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 800195c:	4a8f      	ldr	r2, [pc, #572]	; (8001b9c <HAL_GPIO_Init+0x2a0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d863      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001962:	4a8f      	ldr	r2, [pc, #572]	; (8001ba0 <HAL_GPIO_Init+0x2a4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d046      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001968:	4a8d      	ldr	r2, [pc, #564]	; (8001ba0 <HAL_GPIO_Init+0x2a4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d85d      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800196e:	2b12      	cmp	r3, #18
 8001970:	d82a      	bhi.n	80019c8 <HAL_GPIO_Init+0xcc>
 8001972:	2b12      	cmp	r3, #18
 8001974:	d859      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001976:	a201      	add	r2, pc, #4	; (adr r2, 800197c <HAL_GPIO_Init+0x80>)
 8001978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197c:	080019f7 	.word	0x080019f7
 8001980:	080019d1 	.word	0x080019d1
 8001984:	080019e3 	.word	0x080019e3
 8001988:	08001a25 	.word	0x08001a25
 800198c:	08001a2b 	.word	0x08001a2b
 8001990:	08001a2b 	.word	0x08001a2b
 8001994:	08001a2b 	.word	0x08001a2b
 8001998:	08001a2b 	.word	0x08001a2b
 800199c:	08001a2b 	.word	0x08001a2b
 80019a0:	08001a2b 	.word	0x08001a2b
 80019a4:	08001a2b 	.word	0x08001a2b
 80019a8:	08001a2b 	.word	0x08001a2b
 80019ac:	08001a2b 	.word	0x08001a2b
 80019b0:	08001a2b 	.word	0x08001a2b
 80019b4:	08001a2b 	.word	0x08001a2b
 80019b8:	08001a2b 	.word	0x08001a2b
 80019bc:	08001a2b 	.word	0x08001a2b
 80019c0:	080019d9 	.word	0x080019d9
 80019c4:	080019ed 	.word	0x080019ed
 80019c8:	4a76      	ldr	r2, [pc, #472]	; (8001ba4 <HAL_GPIO_Init+0x2a8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ce:	e02c      	b.n	8001a2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e029      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	3304      	adds	r3, #4
 80019de:	623b      	str	r3, [r7, #32]
          break;
 80019e0:	e024      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	3308      	adds	r3, #8
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e01f      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	330c      	adds	r3, #12
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e01a      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019fe:	2304      	movs	r3, #4
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e013      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	611a      	str	r2, [r3, #16]
          break;
 8001a16:	e009      	b.n	8001a2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	615a      	str	r2, [r3, #20]
          break;
 8001a22:	e003      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          break;
 8001a2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2bff      	cmp	r3, #255	; 0xff
 8001a30:	d801      	bhi.n	8001a36 <HAL_GPIO_Init+0x13a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	e001      	b.n	8001a3a <HAL_GPIO_Init+0x13e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d802      	bhi.n	8001a48 <HAL_GPIO_Init+0x14c>
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0x152>
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	210f      	movs	r1, #15
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	6a39      	ldr	r1, [r7, #32]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80a9 	beq.w	8001bce <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <HAL_GPIO_Init+0x2ac>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a49      	ldr	r2, [pc, #292]	; (8001ba8 <HAL_GPIO_Init+0x2ac>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <HAL_GPIO_Init+0x2ac>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a94:	4a45      	ldr	r2, [pc, #276]	; (8001bac <HAL_GPIO_Init+0x2b0>)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a3d      	ldr	r2, [pc, #244]	; (8001bb0 <HAL_GPIO_Init+0x2b4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00d      	beq.n	8001adc <HAL_GPIO_Init+0x1e0>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a3c      	ldr	r2, [pc, #240]	; (8001bb4 <HAL_GPIO_Init+0x2b8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d007      	beq.n	8001ad8 <HAL_GPIO_Init+0x1dc>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a3b      	ldr	r2, [pc, #236]	; (8001bb8 <HAL_GPIO_Init+0x2bc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_GPIO_Init+0x1d8>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e004      	b.n	8001ade <HAL_GPIO_Init+0x1e2>
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e002      	b.n	8001ade <HAL_GPIO_Init+0x1e2>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_GPIO_Init+0x1e2>
 8001adc:	2300      	movs	r3, #0
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	f002 0203 	and.w	r2, r2, #3
 8001ae4:	0092      	lsls	r2, r2, #2
 8001ae6:	4093      	lsls	r3, r2
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aee:	492f      	ldr	r1, [pc, #188]	; (8001bac <HAL_GPIO_Init+0x2b0>)
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	492b      	ldr	r1, [pc, #172]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4927      	ldr	r1, [pc, #156]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4921      	ldr	r1, [pc, #132]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	491d      	ldr	r1, [pc, #116]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4917      	ldr	r1, [pc, #92]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4913      	ldr	r1, [pc, #76]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01f      	beq.n	8001bc0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	490d      	ldr	r1, [pc, #52]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
 8001b8c:	e01f      	b.n	8001bce <HAL_GPIO_Init+0x2d2>
 8001b8e:	bf00      	nop
 8001b90:	10320000 	.word	0x10320000
 8001b94:	10310000 	.word	0x10310000
 8001b98:	10220000 	.word	0x10220000
 8001b9c:	10210000 	.word	0x10210000
 8001ba0:	10120000 	.word	0x10120000
 8001ba4:	10110000 	.word	0x10110000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_GPIO_Init+0x2f4>)
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	4909      	ldr	r1, [pc, #36]	; (8001bf0 <HAL_GPIO_Init+0x2f4>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	fa22 f303 	lsr.w	r3, r2, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f47f ae96 	bne.w	8001910 <HAL_GPIO_Init+0x14>
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	372c      	adds	r7, #44	; 0x2c
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	40010400 	.word	0x40010400

08001bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	887b      	ldrh	r3, [r7, #2]
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e001      	b.n	8001c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	807b      	strh	r3, [r7, #2]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c32:	787b      	ldrb	r3, [r7, #1]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c38:	887a      	ldrh	r2, [r7, #2]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c3e:	e003      	b.n	8001c48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	041a      	lsls	r2, r3, #16
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	611a      	str	r2, [r3, #16]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c64:	887a      	ldrh	r2, [r7, #2]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	041a      	lsls	r2, r3, #16
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	400b      	ands	r3, r1
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	611a      	str	r2, [r3, #16]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e272      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8087 	beq.w	8001db2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca4:	4b92      	ldr	r3, [pc, #584]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d00c      	beq.n	8001cca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb0:	4b8f      	ldr	r3, [pc, #572]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d112      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5e>
 8001cbc:	4b8c      	ldr	r3, [pc, #560]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cca:	4b89      	ldr	r3, [pc, #548]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d06c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x12c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d168      	bne.n	8001db0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e24c      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x76>
 8001cec:	4b80      	ldr	r3, [pc, #512]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a7f      	ldr	r2, [pc, #508]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e02e      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x98>
 8001d02:	4b7b      	ldr	r3, [pc, #492]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a7a      	ldr	r2, [pc, #488]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b78      	ldr	r3, [pc, #480]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a77      	ldr	r2, [pc, #476]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e01d      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0xbc>
 8001d26:	4b72      	ldr	r3, [pc, #456]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a71      	ldr	r2, [pc, #452]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b6f      	ldr	r3, [pc, #444]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a6e      	ldr	r2, [pc, #440]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e00b      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001d40:	4b6b      	ldr	r3, [pc, #428]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a6a      	ldr	r2, [pc, #424]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a67      	ldr	r2, [pc, #412]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff fcb4 	bl	80016cc <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d68:	f7ff fcb0 	bl	80016cc <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	; 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e200      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	4b5d      	ldr	r3, [pc, #372]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0xe4>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fca0 	bl	80016cc <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff fc9c 	bl	80016cc <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e1ec      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x10c>
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d063      	beq.n	8001e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dbe:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dca:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d11c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x18c>
 8001dd6:	4b46      	ldr	r3, [pc, #280]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d116      	bne.n	8001e10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <HAL_RCC_OscConfig+0x176>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e1c0      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4939      	ldr	r1, [pc, #228]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	e03a      	b.n	8001e86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d020      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e18:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fc55 	bl	80016cc <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e26:	f7ff fc51 	bl	80016cc <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e1a1      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e38:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4927      	ldr	r1, [pc, #156]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
 8001e58:	e015      	b.n	8001e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fc34 	bl	80016cc <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e68:	f7ff fc30 	bl	80016cc <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e180      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d03a      	beq.n	8001f08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d019      	beq.n	8001ece <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff fc14 	bl	80016cc <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fc10 	bl	80016cc <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e160      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f000 faa6 	bl	8002418 <RCC_Delay>
 8001ecc:	e01c      	b.n	8001f08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed4:	f7ff fbfa 	bl	80016cc <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eda:	e00f      	b.n	8001efc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001edc:	f7ff fbf6 	bl	80016cc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d908      	bls.n	8001efc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e146      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	42420000 	.word	0x42420000
 8001ef8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	4b92      	ldr	r3, [pc, #584]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e9      	bne.n	8001edc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80a6 	beq.w	8002062 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1a:	4b8b      	ldr	r3, [pc, #556]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10d      	bne.n	8001f42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b88      	ldr	r3, [pc, #544]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a87      	ldr	r2, [pc, #540]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b85      	ldr	r3, [pc, #532]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b82      	ldr	r3, [pc, #520]	; (800214c <HAL_RCC_OscConfig+0x4c8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d118      	bne.n	8001f80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4e:	4b7f      	ldr	r3, [pc, #508]	; (800214c <HAL_RCC_OscConfig+0x4c8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a7e      	ldr	r2, [pc, #504]	; (800214c <HAL_RCC_OscConfig+0x4c8>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fbb7 	bl	80016cc <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f62:	f7ff fbb3 	bl	80016cc <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b64      	cmp	r3, #100	; 0x64
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e103      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	4b75      	ldr	r3, [pc, #468]	; (800214c <HAL_RCC_OscConfig+0x4c8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x312>
 8001f88:	4b6f      	ldr	r3, [pc, #444]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a6e      	ldr	r2, [pc, #440]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	e02d      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x334>
 8001f9e:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a69      	ldr	r2, [pc, #420]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	4b67      	ldr	r3, [pc, #412]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4a66      	ldr	r2, [pc, #408]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6213      	str	r3, [r2, #32]
 8001fb6:	e01c      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCC_OscConfig+0x356>
 8001fc0:	4b61      	ldr	r3, [pc, #388]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a60      	ldr	r2, [pc, #384]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	4b5e      	ldr	r3, [pc, #376]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a5d      	ldr	r2, [pc, #372]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e00b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001fda:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a5a      	ldr	r2, [pc, #360]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	4b58      	ldr	r3, [pc, #352]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a57      	ldr	r2, [pc, #348]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d015      	beq.n	8002026 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff fb67 	bl	80016cc <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7ff fb63 	bl	80016cc <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0b1      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ee      	beq.n	8002002 <HAL_RCC_OscConfig+0x37e>
 8002024:	e014      	b.n	8002050 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7ff fb51 	bl	80016cc <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7ff fb4d 	bl	80016cc <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e09b      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	4b40      	ldr	r3, [pc, #256]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ee      	bne.n	800202e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a3b      	ldr	r2, [pc, #236]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002060:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8087 	beq.w	800217a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d061      	beq.n	800213c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d146      	bne.n	800210e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002080:	4b33      	ldr	r3, [pc, #204]	; (8002150 <HAL_RCC_OscConfig+0x4cc>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7ff fb21 	bl	80016cc <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208e:	f7ff fb1d 	bl	80016cc <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e06d      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a0:	4b29      	ldr	r3, [pc, #164]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b4:	d108      	bne.n	80020c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4921      	ldr	r1, [pc, #132]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a19      	ldr	r1, [r3, #32]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	430b      	orrs	r3, r1
 80020da:	491b      	ldr	r1, [pc, #108]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_RCC_OscConfig+0x4cc>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff faf1 	bl	80016cc <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff faed 	bl	80016cc <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e03d      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x46a>
 800210c:	e035      	b.n	800217a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_RCC_OscConfig+0x4cc>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff fada 	bl	80016cc <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff fad6 	bl	80016cc <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e026      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x498>
 800213a:	e01e      	b.n	800217a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d107      	bne.n	8002154 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e019      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
 8002148:	40021000 	.word	0x40021000
 800214c:	40007000 	.word	0x40007000
 8002150:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCC_OscConfig+0x500>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	429a      	cmp	r2, r3
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000

08002188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0d0      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d910      	bls.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b67      	ldr	r3, [pc, #412]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 0207 	bic.w	r2, r3, #7
 80021b2:	4965      	ldr	r1, [pc, #404]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b63      	ldr	r3, [pc, #396]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0b8      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a58      	ldr	r2, [pc, #352]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021fc:	4b53      	ldr	r3, [pc, #332]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a52      	ldr	r2, [pc, #328]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002206:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002208:	4b50      	ldr	r3, [pc, #320]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	494d      	ldr	r1, [pc, #308]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d040      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d115      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e07f      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e073      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e06b      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4936      	ldr	r1, [pc, #216]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002278:	f7ff fa28 	bl	80016cc <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7ff fa24 	bl	80016cc <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e053      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 020c 	and.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1eb      	bne.n	8002280 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d210      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 0207 	bic.w	r2, r3, #7
 80022be:	4922      	ldr	r1, [pc, #136]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e032      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e4:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4916      	ldr	r1, [pc, #88]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	490e      	ldr	r1, [pc, #56]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002316:	f000 f821 	bl	800235c <HAL_RCC_GetSysClockFreq>
 800231a:	4602      	mov	r2, r0
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	490a      	ldr	r1, [pc, #40]	; (8002350 <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	5ccb      	ldrb	r3, [r1, r3]
 800232a:	fa22 f303 	lsr.w	r3, r2, r3
 800232e:	4a09      	ldr	r2, [pc, #36]	; (8002354 <HAL_RCC_ClockConfig+0x1cc>)
 8002330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_RCC_ClockConfig+0x1d0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f986 	bl	8001648 <HAL_InitTick>

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40022000 	.word	0x40022000
 800234c:	40021000 	.word	0x40021000
 8002350:	08002c9c 	.word	0x08002c9c
 8002354:	20000028 	.word	0x20000028
 8002358:	2000002c 	.word	0x2000002c

0800235c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800235c:	b490      	push	{r4, r7}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002362:	4b29      	ldr	r3, [pc, #164]	; (8002408 <HAL_RCC_GetSysClockFreq+0xac>)
 8002364:	1d3c      	adds	r4, r7, #4
 8002366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800236c:	f240 2301 	movw	r3, #513	; 0x201
 8002370:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b04      	cmp	r3, #4
 8002394:	d002      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x40>
 8002396:	2b08      	cmp	r3, #8
 8002398:	d003      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x46>
 800239a:	e02b      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800239c:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb4>)
 800239e:	623b      	str	r3, [r7, #32]
      break;
 80023a0:	e02b      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	0c9b      	lsrs	r3, r3, #18
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	3328      	adds	r3, #40	; 0x28
 80023ac:	443b      	add	r3, r7
 80023ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d012      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_RCC_GetSysClockFreq+0xb0>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	0c5b      	lsrs	r3, r3, #17
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	3328      	adds	r3, #40	; 0x28
 80023ca:	443b      	add	r3, r7
 80023cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023d6:	fb03 f202 	mul.w	r2, r3, r2
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	e004      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e8:	fb02 f303 	mul.w	r3, r2, r3
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	623b      	str	r3, [r7, #32]
      break;
 80023f2:	e002      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023f6:	623b      	str	r3, [r7, #32]
      break;
 80023f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fa:	6a3b      	ldr	r3, [r7, #32]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3728      	adds	r7, #40	; 0x28
 8002400:	46bd      	mov	sp, r7
 8002402:	bc90      	pop	{r4, r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	08002c8c 	.word	0x08002c8c
 800240c:	40021000 	.word	0x40021000
 8002410:	007a1200 	.word	0x007a1200
 8002414:	003d0900 	.word	0x003d0900

08002418 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <RCC_Delay+0x34>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <RCC_Delay+0x38>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	0a5b      	lsrs	r3, r3, #9
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002434:	bf00      	nop
  }
  while (Delay --);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1e5a      	subs	r2, r3, #1
 800243a:	60fa      	str	r2, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f9      	bne.n	8002434 <RCC_Delay+0x1c>
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	20000028 	.word	0x20000028
 8002450:	10624dd3 	.word	0x10624dd3

08002454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e041      	b.n	80024ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff f84c 	bl	8001518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3304      	adds	r3, #4
 8002490:	4619      	mov	r1, r3
 8002492:	4610      	mov	r0, r2
 8002494:	f000 fa6a 	bl	800296c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d001      	beq.n	800250c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e035      	b.n	8002578 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a16      	ldr	r2, [pc, #88]	; (8002584 <HAL_TIM_Base_Start_IT+0x90>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d009      	beq.n	8002542 <HAL_TIM_Base_Start_IT+0x4e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002536:	d004      	beq.n	8002542 <HAL_TIM_Base_Start_IT+0x4e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a12      	ldr	r2, [pc, #72]	; (8002588 <HAL_TIM_Base_Start_IT+0x94>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d111      	bne.n	8002566 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b06      	cmp	r3, #6
 8002552:	d010      	beq.n	8002576 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002564:	e007      	b.n	8002576 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0201 	orr.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40000400 	.word	0x40000400

0800258c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d122      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0202 	mvn.w	r2, #2
 80025b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f9b1 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f9a4 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f9b3 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d122      	bne.n	800263c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b04      	cmp	r3, #4
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0204 	mvn.w	r2, #4
 800260c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f987 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f97a 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f989 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b08      	cmp	r3, #8
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b08      	cmp	r3, #8
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0208 	mvn.w	r2, #8
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2204      	movs	r2, #4
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f95d 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f950 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f95f 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b10      	cmp	r3, #16
 800269c:	d122      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d11b      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0210 	mvn.w	r2, #16
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2208      	movs	r2, #8
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f933 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f926 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f935 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d10e      	bne.n	8002710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0201 	mvn.w	r2, #1
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe fb34 	bl	8000d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b80      	cmp	r3, #128	; 0x80
 800271c:	d10e      	bne.n	800273c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d107      	bne.n	800273c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fa67 	bl	8002c0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b40      	cmp	r3, #64	; 0x40
 8002748:	d10e      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d107      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8f9 	bl	800295a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b20      	cmp	r3, #32
 8002774:	d10e      	bne.n	8002794 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b20      	cmp	r3, #32
 8002782:	d107      	bne.n	8002794 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0220 	mvn.w	r2, #32
 800278c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fa32 	bl	8002bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_TIM_ConfigClockSource+0x18>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e0b3      	b.n	800291c <HAL_TIM_ConfigClockSource+0x180>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ec:	d03e      	beq.n	800286c <HAL_TIM_ConfigClockSource+0xd0>
 80027ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f2:	f200 8087 	bhi.w	8002904 <HAL_TIM_ConfigClockSource+0x168>
 80027f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fa:	f000 8085 	beq.w	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002802:	d87f      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 8002804:	2b70      	cmp	r3, #112	; 0x70
 8002806:	d01a      	beq.n	800283e <HAL_TIM_ConfigClockSource+0xa2>
 8002808:	2b70      	cmp	r3, #112	; 0x70
 800280a:	d87b      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 800280c:	2b60      	cmp	r3, #96	; 0x60
 800280e:	d050      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x116>
 8002810:	2b60      	cmp	r3, #96	; 0x60
 8002812:	d877      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 8002814:	2b50      	cmp	r3, #80	; 0x50
 8002816:	d03c      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0xf6>
 8002818:	2b50      	cmp	r3, #80	; 0x50
 800281a:	d873      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d058      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0x136>
 8002820:	2b40      	cmp	r3, #64	; 0x40
 8002822:	d86f      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 8002824:	2b30      	cmp	r3, #48	; 0x30
 8002826:	d064      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x156>
 8002828:	2b30      	cmp	r3, #48	; 0x30
 800282a:	d86b      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 800282c:	2b20      	cmp	r3, #32
 800282e:	d060      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x156>
 8002830:	2b20      	cmp	r3, #32
 8002832:	d867      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 8002834:	2b00      	cmp	r3, #0
 8002836:	d05c      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x156>
 8002838:	2b10      	cmp	r3, #16
 800283a:	d05a      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800283c:	e062      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6899      	ldr	r1, [r3, #8]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f000 f95c 	bl	8002b0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002860:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	609a      	str	r2, [r3, #8]
      break;
 800286a:	e04e      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6899      	ldr	r1, [r3, #8]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f000 f945 	bl	8002b0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800288e:	609a      	str	r2, [r3, #8]
      break;
 8002890:	e03b      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	461a      	mov	r2, r3
 80028a0:	f000 f8bc 	bl	8002a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2150      	movs	r1, #80	; 0x50
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f913 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 80028b0:	e02b      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6859      	ldr	r1, [r3, #4]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	461a      	mov	r2, r3
 80028c0:	f000 f8da 	bl	8002a78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2160      	movs	r1, #96	; 0x60
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f903 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 80028d0:	e01b      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6859      	ldr	r1, [r3, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	461a      	mov	r2, r3
 80028e0:	f000 f89c 	bl	8002a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2140      	movs	r1, #64	; 0x40
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f8f3 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 80028f0:	e00b      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f000 f8ea 	bl	8002ad6 <TIM_ITRx_SetConfig>
        break;
 8002902:	e002      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002904:	bf00      	nop
 8002906:	e000      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002908:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a25      	ldr	r2, [pc, #148]	; (8002a14 <TIM_Base_SetConfig+0xa8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <TIM_Base_SetConfig+0x28>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298a:	d003      	beq.n	8002994 <TIM_Base_SetConfig+0x28>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a22      	ldr	r2, [pc, #136]	; (8002a18 <TIM_Base_SetConfig+0xac>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d108      	bne.n	80029a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <TIM_Base_SetConfig+0xa8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <TIM_Base_SetConfig+0x52>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d003      	beq.n	80029be <TIM_Base_SetConfig+0x52>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a17      	ldr	r2, [pc, #92]	; (8002a18 <TIM_Base_SetConfig+0xac>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d108      	bne.n	80029d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <TIM_Base_SetConfig+0xa8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d103      	bne.n	8002a04 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	615a      	str	r2, [r3, #20]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40000400 	.word	0x40000400

08002a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f023 0201 	bic.w	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f023 030a 	bic.w	r3, r3, #10
 8002a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	621a      	str	r2, [r3, #32]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f023 0210 	bic.w	r2, r3, #16
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	031b      	lsls	r3, r3, #12
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	621a      	str	r2, [r3, #32]
}
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f043 0307 	orr.w	r3, r3, #7
 8002af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	609a      	str	r2, [r3, #8]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b087      	sub	sp, #28
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	021a      	lsls	r2, r3, #8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	609a      	str	r2, [r3, #8]
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e041      	b.n	8002be4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d004      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40000400 	.word	0x40000400

08002bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <__libc_init_array>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	2600      	movs	r6, #0
 8002c20:	4d0c      	ldr	r5, [pc, #48]	; (8002c54 <__libc_init_array+0x38>)
 8002c22:	4c0d      	ldr	r4, [pc, #52]	; (8002c58 <__libc_init_array+0x3c>)
 8002c24:	1b64      	subs	r4, r4, r5
 8002c26:	10a4      	asrs	r4, r4, #2
 8002c28:	42a6      	cmp	r6, r4
 8002c2a:	d109      	bne.n	8002c40 <__libc_init_array+0x24>
 8002c2c:	f000 f822 	bl	8002c74 <_init>
 8002c30:	2600      	movs	r6, #0
 8002c32:	4d0a      	ldr	r5, [pc, #40]	; (8002c5c <__libc_init_array+0x40>)
 8002c34:	4c0a      	ldr	r4, [pc, #40]	; (8002c60 <__libc_init_array+0x44>)
 8002c36:	1b64      	subs	r4, r4, r5
 8002c38:	10a4      	asrs	r4, r4, #2
 8002c3a:	42a6      	cmp	r6, r4
 8002c3c:	d105      	bne.n	8002c4a <__libc_init_array+0x2e>
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
 8002c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c44:	4798      	blx	r3
 8002c46:	3601      	adds	r6, #1
 8002c48:	e7ee      	b.n	8002c28 <__libc_init_array+0xc>
 8002c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4e:	4798      	blx	r3
 8002c50:	3601      	adds	r6, #1
 8002c52:	e7f2      	b.n	8002c3a <__libc_init_array+0x1e>
 8002c54:	08002cac 	.word	0x08002cac
 8002c58:	08002cac 	.word	0x08002cac
 8002c5c:	08002cac 	.word	0x08002cac
 8002c60:	08002cb0 	.word	0x08002cb0

08002c64 <memset>:
 8002c64:	4603      	mov	r3, r0
 8002c66:	4402      	add	r2, r0
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d100      	bne.n	8002c6e <memset+0xa>
 8002c6c:	4770      	bx	lr
 8002c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c72:	e7f9      	b.n	8002c68 <memset+0x4>

08002c74 <_init>:
 8002c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c76:	bf00      	nop
 8002c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7a:	bc08      	pop	{r3}
 8002c7c:	469e      	mov	lr, r3
 8002c7e:	4770      	bx	lr

08002c80 <_fini>:
 8002c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c82:	bf00      	nop
 8002c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c86:	bc08      	pop	{r3}
 8002c88:	469e      	mov	lr, r3
 8002c8a:	4770      	bx	lr
